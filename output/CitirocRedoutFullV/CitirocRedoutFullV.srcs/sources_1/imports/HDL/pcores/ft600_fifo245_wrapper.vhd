
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

library UNISIM;
use UNISIM.VComponents.all;

Library xpm;
use xpm.vcomponents.all;

entity ft600_fifo245_wrapper is
Port ( 

          --EEPROM SICUREZZE
          EEMOSI : out STD_LOGIC;
          EEMISO : in STD_LOGIC;
          EECLK : out STD_LOGIC;
          EECS : out STD_LOGIC;
          license_ok : out std_logic;
          
          FTDI_ADBUS : inout STD_LOGIC_VECTOR (31 downto 0);
          FTDI_BE	 : inout STD_LOGIC_VECTOR (3 downto 0);
          FTDI_RXFN : in STD_LOGIC;			--EMPTY
          FTDI_TXEN : in STD_LOGIC; 		--FULL
          FTDI_RDN	: out STD_LOGIC;		--READ ENABLE
          FTDI_TXN	: out STD_LOGIC;		--WRITE ENABLE
          FTDI_CLK	: in STD_LOGIC;			--FTDI CLOCK
          FTDI_OEN	: out STD_LOGIC;		--OUTPUT ENABLE NEGATO LATO FTDI
          FTDI_SIWU : out STD_LOGIC;		--COMMIT A PACKET IMMEDIATLY

		  
		REG_Fiforeset_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_Fiforeset_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Fiforeset_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_Fiforeset_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
        
       --Flash controller 
        BUS_Flash_0_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0);
        BUS_Flash_0_ADDRESS : OUT STD_LOGIC_VECTOR(15 downto 0); 
        BUS_Flash_0_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
        BUS_Flash_0_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
        BUS_Flash_0_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
        BUS_Flash_0_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
        
        REG_FLASH_CNTR_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
        REG_FLASH_CNTR_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
        INT_FLASH_CNTR_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
        INT_FLASH_CNTR_WR : OUT STD_LOGIC_VECTOR(0 downto 0);
        
        REG_FLASH_ADDRESS_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
        REG_FLASH_ADDRESS_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
        INT_FLASH_ADDRESS_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
        INT_FLASH_ADDRESS_WR : OUT STD_LOGIC_VECTOR(0 downto 0);    	  
	  
        --test
        BUS_Test_0_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0);
        BUS_Test_0_ADDRESS : OUT STD_LOGIC_VECTOR(15 downto 0); 
        BUS_Test_0_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
        BUS_Test_0_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
        BUS_Test_0_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
        BUS_Test_0_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 		

		PGB_EEPROM_KEY                             : IN    STD_LOGIC_VECTOR (31 DOWNTO 0);
		PGB_REG_MODEL                              : IN    STD_LOGIC_VECTOR (31 DOWNTO 0);
		PGB_BOARD_SN                               : IN    STD_LOGIC_VECTOR (31 DOWNTO 0);
		PGB_ASIC_COUNT                             : IN    STD_LOGIC_VECTOR (31 DOWNTO 0);
		
		INT_EEPROM_WR 	    					   : out std_logic_vector (0 downto 0);		
		REG_EEPROM_WR               			   : out std_logic_vector (31 downto 0);
		REG_IIC_STATUS							   : in std_logic_vector (31 downto 0);		

				

		REG_FIRMWARE_BUILD : IN STD_LOGIC_VECTOR(31 downto 0);
      -- Register interface          
		REG_TRIG_A_SEL_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_TRIG_A_SEL_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_TRIG_A_SEL_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_TRIG_A_SEL_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_VET_A_EN_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_VET_A_EN_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_VET_A_EN_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_VET_A_EN_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_VET_B_EN_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_VET_B_EN_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_VET_B_EN_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_VET_B_EN_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_VET_C_EN_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_VET_C_EN_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_VET_C_EN_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_VET_C_EN_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_VET_D_EN_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_VET_D_EN_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_VET_D_EN_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_VET_D_EN_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_SW_VET_A_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_SW_VET_A_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_SW_VET_A_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_SW_VET_A_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_SW_VET_B_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_SW_VET_B_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_SW_VET_B_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_SW_VET_B_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_SW_VET_C_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_SW_VET_C_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_SW_VET_C_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_SW_VET_C_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_SW_VET_D_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_SW_VET_D_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_SW_VET_D_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_SW_VET_D_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_TRIG_GBL_SEL_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_TRIG_GBL_SEL_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_TRIG_GBL_SEL_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_TRIG_GBL_SEL_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_EXT_DELAY_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_EXT_DELAY_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_EXT_DELAY_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_EXT_DELAY_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_SW_TRIG_FREQ_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_SW_TRIG_FREQ_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_SW_TRIG_FREQ_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_SW_TRIG_FREQ_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_A_RATE_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_A_RATE_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_A_RATE_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_A_RATE_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_B_RATE_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_B_RATE_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_B_RATE_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_B_RATE_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_C_RATE_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_C_RATE_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_C_RATE_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_C_RATE_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_D_RATE_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_D_RATE_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_D_RATE_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_D_RATE_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_T0_COUNT_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_T0_COUNT_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_T0_COUNT_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_T0_COUNT_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_A_TRG_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_A_TRG_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_A_TRG_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_A_TRG_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_B_TRG_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_B_TRG_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_B_TRG_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_B_TRG_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_C_TRG_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_C_TRG_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_C_TRG_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_C_TRG_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_D_TRG_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_D_TRG_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_D_TRG_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_D_TRG_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_RUNSTART_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_RUNSTART_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_RUNSTART_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_RUNSTART_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_RUN_TIME_LSB_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_RUN_TIME_LSB_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_RUN_TIME_LSB_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_RUN_TIME_LSB_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_RUN_TIME_MSB_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_RUN_TIME_MSB_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_RUN_TIME_MSB_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_RUN_TIME_MSB_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_DEAD_TIME_LSB_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_DEAD_TIME_LSB_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_DEAD_TIME_LSB_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_DEAD_TIME_LSB_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_DEAD_TIME_MSB_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_DEAD_TIME_MSB_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_DEAD_TIME_MSB_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_DEAD_TIME_MSB_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_A_LOST_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_A_LOST_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_A_LOST_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_A_LOST_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_B_LOST_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_B_LOST_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_B_LOST_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_B_LOST_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_C_LOST_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_C_LOST_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_C_LOST_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_C_LOST_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_D_LOST_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_D_LOST_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_D_LOST_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_D_LOST_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocCfg1_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_CitirocCfg1_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_CitirocCfg1_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocCfg1_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocCfg1_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG0_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG0_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG1_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG1_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG2_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG2_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG3_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG3_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG4_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG4_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG5_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG5_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG6_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG6_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG7_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG7_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG8_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG8_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG9_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG9_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG10_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG10_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG11_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG11_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG12_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG12_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG13_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG13_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG14_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG14_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG15_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG15_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG16_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG16_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG17_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG17_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG18_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG18_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG19_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG19_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG20_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG20_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG21_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG21_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG22_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG22_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG23_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG23_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG24_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG24_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG25_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG25_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG26_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG26_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG27_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG27_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG28_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG28_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG29_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG29_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG30_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG30_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG31_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG31_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG32_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG32_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG33_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG33_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG34_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG34_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_REG_CFG35_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_REG_CFG35_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg1_START_REG_CFG_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg1_START_REG_CFG_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocCfg2_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_CitirocCfg2_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_CitirocCfg2_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocCfg2_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocCfg2_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG0_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG0_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG1_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG1_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG2_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG2_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG3_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG3_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG4_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG4_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG5_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG5_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG6_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG6_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG7_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG7_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG8_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG8_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG9_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG9_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG10_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG10_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG11_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG11_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG12_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG12_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG13_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG13_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG14_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG14_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG15_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG15_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG16_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG16_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG17_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG17_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG18_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG18_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG19_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG19_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG20_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG20_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG21_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG21_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG22_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG22_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG23_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG23_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG24_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG24_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG25_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG25_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG26_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG26_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG27_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG27_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG28_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG28_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG29_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG29_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG30_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG30_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG31_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG31_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG32_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG32_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG33_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG33_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG34_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG34_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_REG_CFG35_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_REG_CFG35_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg2_START_REG_CFG_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg2_START_REG_CFG_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocCfg3_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_CitirocCfg3_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_CitirocCfg3_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocCfg3_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocCfg3_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG0_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG0_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG1_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG1_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG2_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG2_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG3_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG3_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG4_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG4_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG5_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG5_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG6_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG6_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG7_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG7_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG8_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG8_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG9_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG9_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG10_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG10_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG11_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG11_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG12_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG12_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG13_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG13_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG14_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG14_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG15_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG15_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG16_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG16_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG17_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG17_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG18_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG18_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG19_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG19_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG20_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG20_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG21_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG21_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG22_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG22_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG23_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG23_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG24_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG24_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG25_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG25_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG26_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG26_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG27_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG27_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG28_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG28_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG29_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG29_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG30_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG30_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG31_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG31_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG32_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG32_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG33_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG33_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG34_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG34_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_REG_CFG35_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_REG_CFG35_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg3_START_REG_CFG_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg3_START_REG_CFG_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocCfg0_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_CitirocCfg0_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_CitirocCfg0_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocCfg0_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocCfg0_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG0_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG0_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG1_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG1_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG2_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG2_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG3_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG3_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG4_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG4_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG5_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG5_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG6_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG6_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG7_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG7_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG8_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG8_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG9_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG9_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG10_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG10_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG11_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG11_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG12_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG12_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG13_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG13_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG14_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG14_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG15_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG15_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG16_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG16_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG17_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG17_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG18_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG18_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG19_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG19_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG20_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG20_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG21_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG21_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG22_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG22_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG23_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG23_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG24_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG24_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG25_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG25_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG26_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG26_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG27_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG27_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG28_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG28_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG29_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG29_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG30_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG30_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG31_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG31_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG32_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG32_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG33_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG33_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG34_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG34_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_REG_CFG35_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_REG_CFG35_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocCfg0_START_REG_CFG_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocCfg0_START_REG_CFG_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_T0_SOFT_FREQ_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_T0_SOFT_FREQ_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_T0_SOFT_FREQ_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_T0_SOFT_FREQ_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_T0_SEL_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_T0_SEL_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_T0_SEL_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_T0_SEL_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HOLD_TIME_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HOLD_TIME_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HOLD_TIME_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HOLD_TIME_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_FR_IFP_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_FR_IFP_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_FR_IFP_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_FR_IFP_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_FR_LIMIT_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_FR_LIMIT_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_FR_LIMIT_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_FR_LIMIT_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_FR_IFP2_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_FR_IFP2_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_FR_IFP2_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_FR_IFP2_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_FR_MODE_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_FR_MODE_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_FR_MODE_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_FR_MODE_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_FR_DBG1_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_FR_DBG1_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_FR_DBG1_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_FR_DBG1_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_FR_DBG2_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_FR_DBG2_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_FR_DBG2_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_FR_DBG2_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CP_0_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_CP_0_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_CP_0_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CP_0_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CP_0_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
		REG_CP_0_READ_STATUS_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		INT_CP_0_READ_STATUS_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CP_0_READ_VALID_WORDS_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		INT_CP_0_READ_VALID_WORDS_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CP_0_CONFIG_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CP_0_CONFIG_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocFrame0_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_CitirocFrame0_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_CitirocFrame0_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocFrame0_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_CitirocFrame0_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocFrame0_CONTROL_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocFrame0_CONTROL_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_CitirocFrame0_STATUS_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		INT_CitirocFrame0_STATUS_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_DTWC_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_DTWC_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_DTWC_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_DTWC_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_DTWC_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
		REG_VALIDATION_CFG_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_VALIDATION_CFG_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_VALIDATION_CFG_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_VALIDATION_CFG_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_ON_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_ON_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_ON_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_ON_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_EMERGENCY_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_EMERGENCY_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_EMERGENCY_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_EMERGENCY_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_VOUT_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_VOUT_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_VOUT_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_VOUT_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_ENTCOMP_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_ENTCOMP_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_ENTCOMP_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_ENTCOMP_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_TM_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_TM_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_TM_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_TM_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_TQ_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_TQ_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_TQ_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_TQ_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_TCOEF_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_TCOEF_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_TCOEF_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_TCOEF_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_IMAX_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_IMAX_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_IMAX_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_IMAX_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_RAMP_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_RAMP_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_RAMP_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_RAMP_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_VMAX_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_VMAX_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_VMAX_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_VMAX_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_MSTATUS_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_MSTATUS_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_MSTATUS_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_MSTATUS_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_MVOUT_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_MVOUT_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_MVOUT_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_MVOUT_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_MTEMP_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_MTEMP_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_MTEMP_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_MTEMP_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_MVTARGET_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_MVTARGET_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_MVTARGET_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_MVTARGET_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_MAVTARGET_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_MAVTARGET_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_MAVTARGET_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_MAVTARGET_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_T_SENS1_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_T_SENS1_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_T_SENS1_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_T_SENS1_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_T_SENS2_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_T_SENS2_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_T_SENS2_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_T_SENS2_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_HV_MIOUT_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_HV_MIOUT_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_HV_MIOUT_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_HV_MIOUT_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_TRIGGER_OUT_W_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_TRIGGER_OUT_W_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_TRIGGER_OUT_W_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_TRIGGER_OUT_W_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_RateMeter_2_READ_ADDRESS : OUT STD_LOGIC_VECTOR(15 downto 0); 
	BUS_RateMeter_2_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_RateMeter_2_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_RateMeter_2_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_RateMeter_2_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_RateMeter_2_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
	BUS_RateMeter_3_READ_ADDRESS : OUT STD_LOGIC_VECTOR(15 downto 0); 
	BUS_RateMeter_3_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_RateMeter_3_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_RateMeter_3_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_RateMeter_3_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_RateMeter_3_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
	BUS_RateMeter_0_READ_ADDRESS : OUT STD_LOGIC_VECTOR(15 downto 0); 
	BUS_RateMeter_0_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_RateMeter_0_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_RateMeter_0_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_RateMeter_0_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_RateMeter_0_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
	BUS_RateMeter_1_READ_ADDRESS : OUT STD_LOGIC_VECTOR(15 downto 0); 
	BUS_RateMeter_1_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_RateMeter_1_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_RateMeter_1_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_RateMeter_1_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_RateMeter_1_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
		REG_T0SW_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_T0SW_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_T0SW_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_T0SW_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_GTS_RESSEL_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_GTS_RESSEL_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_GTS_RESSEL_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_GTS_RESSEL_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_TRIG_MASK_A_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_TRIG_MASK_A_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_TRIG_MASK_A_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_TRIG_MASK_A_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_TRIG_MASK_B_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_TRIG_MASK_B_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_TRIG_MASK_B_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_TRIG_MASK_B_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_TRIG_MASK_C_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_TRIG_MASK_C_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_TRIG_MASK_C_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_TRIG_MASK_C_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_TRIG_MASK_D_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_TRIG_MASK_D_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_TRIG_MASK_D_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_TRIG_MASK_D_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_Oscilloscope_0_READ_ADDRESS : OUT STD_LOGIC_VECTOR(10 downto 0); 
	BUS_Oscilloscope_0_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_Oscilloscope_0_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_Oscilloscope_0_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_Oscilloscope_0_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_Oscilloscope_0_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_0_READ_STATUS_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_0_READ_STATUS_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_0_READ_POSITION_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_0_READ_POSITION_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_0_CONFIG_TRIGGER_MODE_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_0_CONFIG_TRIGGER_MODE_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_0_CONFIG_PRETRIGGER_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_0_CONFIG_PRETRIGGER_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_0_CONFIG_TRIGGER_LEVEL_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_0_CONFIG_TRIGGER_LEVEL_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_0_CONFIG_ARM_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_0_CONFIG_ARM_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_0_CONFIG_DECIMATOR_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_0_CONFIG_DECIMATOR_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_Oscilloscope_1_READ_ADDRESS : OUT STD_LOGIC_VECTOR(10 downto 0); 
	BUS_Oscilloscope_1_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_Oscilloscope_1_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_Oscilloscope_1_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_Oscilloscope_1_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_Oscilloscope_1_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_1_READ_STATUS_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_1_READ_STATUS_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_1_READ_POSITION_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_1_READ_POSITION_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_1_CONFIG_TRIGGER_MODE_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_1_CONFIG_TRIGGER_MODE_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_1_CONFIG_PRETRIGGER_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_1_CONFIG_PRETRIGGER_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_1_CONFIG_TRIGGER_LEVEL_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_1_CONFIG_TRIGGER_LEVEL_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_1_CONFIG_ARM_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_1_CONFIG_ARM_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_1_CONFIG_DECIMATOR_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_1_CONFIG_DECIMATOR_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_Oscilloscope_2_READ_ADDRESS : OUT STD_LOGIC_VECTOR(10 downto 0); 
	BUS_Oscilloscope_2_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_Oscilloscope_2_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_Oscilloscope_2_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_Oscilloscope_2_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_Oscilloscope_2_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_2_READ_STATUS_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_2_READ_STATUS_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_2_READ_POSITION_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_2_READ_POSITION_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_2_CONFIG_TRIGGER_MODE_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_2_CONFIG_TRIGGER_MODE_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_2_CONFIG_PRETRIGGER_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_2_CONFIG_PRETRIGGER_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_2_CONFIG_TRIGGER_LEVEL_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_2_CONFIG_TRIGGER_LEVEL_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_2_CONFIG_ARM_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_2_CONFIG_ARM_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_2_CONFIG_DECIMATOR_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_2_CONFIG_DECIMATOR_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_Oscilloscope_3_READ_ADDRESS : OUT STD_LOGIC_VECTOR(10 downto 0); 
	BUS_Oscilloscope_3_READ_DATA : IN STD_LOGIC_VECTOR(31 downto 0); 
	BUS_Oscilloscope_3_WRITE_DATA : OUT STD_LOGIC_VECTOR(31 downto 0); 
	BUS_Oscilloscope_3_W_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_Oscilloscope_3_R_INT : OUT STD_LOGIC_VECTOR(0 downto 0); 
	BUS_Oscilloscope_3_VLD : IN STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_3_READ_STATUS_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_3_READ_STATUS_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_3_READ_POSITION_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_3_READ_POSITION_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_3_CONFIG_TRIGGER_MODE_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_3_CONFIG_TRIGGER_MODE_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_3_CONFIG_PRETRIGGER_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_3_CONFIG_PRETRIGGER_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_3_CONFIG_TRIGGER_LEVEL_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_3_CONFIG_TRIGGER_LEVEL_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_3_CONFIG_ARM_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_3_CONFIG_ARM_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_Oscilloscope_3_CONFIG_DECIMATOR_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_Oscilloscope_3_CONFIG_DECIMATOR_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_T0_RESET_ON_START_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_T0_RESET_ON_START_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_T0_RESET_ON_START_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_T0_RESET_ON_START_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_ISRUNNING_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_ISRUNNING_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_ISRUNNING_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_ISRUNNING_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_VETO_WAIT_RUN_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_VETO_WAIT_RUN_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_VETO_WAIT_RUN_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_VETO_WAIT_RUN_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_GBL_EN_VETO_EXT_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_GBL_EN_VETO_EXT_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_GBL_EN_VETO_EXT_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_GBL_EN_VETO_EXT_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_INVETO_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_INVETO_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_INVETO_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_INVETO_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_TRG_OUT_MONOSTABLE_EN_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_TRG_OUT_MONOSTABLE_EN_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
		INT_TRG_OUT_MONOSTABLE_EN_RD : OUT STD_LOGIC_VECTOR(0 downto 0); 
		INT_TRG_OUT_MONOSTABLE_EN_WR : OUT STD_LOGIC_VECTOR(0 downto 0); 
		REG_UNIQUE_RD : IN STD_LOGIC_VECTOR(31 downto 0); 
		REG_UNIQUE_WR : OUT STD_LOGIC_VECTOR(31 downto 0); 
	

		--LATO FPGA
	  f_CLK : IN STD_LOGIC;
	  f_RESET : IN STD_LOGIC
			  	  
			  
);
end ft600_fifo245_wrapper;

architecture Behavioral of ft600_fifo245_wrapper is



	component FTDI_FIFOs
		port (
		rst: IN std_logic;
		wr_clk: IN std_logic;
		rd_clk: IN std_logic;
		din: IN std_logic_VECTOR(33 downto 0);
		wr_en: IN std_logic;
		rd_en: IN std_logic;
		dout: OUT std_logic_VECTOR(33 downto 0);
		full: OUT std_logic;
		empty: OUT std_logic;
		valid: OUT std_logic;
		prog_empty: OUT std_logic;
		prog_full: OUT std_logic
		);
	end component;
	
	component FTDI_FIFO_AW
        port (
        rst: IN std_logic;
        wr_clk: IN std_logic;
        rd_clk: IN std_logic;
        din: IN std_logic_VECTOR(65 downto 0);
        wr_en: IN std_logic;
        rd_en: IN std_logic;
        dout: OUT std_logic_VECTOR(65 downto 0);
        full: OUT std_logic;
        empty: OUT std_logic;
        valid: OUT std_logic;
        prog_empty: OUT std_logic;
        prog_full: OUT std_logic
        );
    end component;	


	COMPONENT ft600_fifo245_core
	PORT(
        --EEPROM SICUREZZE
        EEMOSI : out STD_LOGIC;
        EEMISO : in STD_LOGIC;
        EECLK : out STD_LOGIC;
        EECS : out STD_LOGIC;
        license_ok : out std_logic;
            
		reset : IN std_logic;
		FTDI_RXFN : IN std_logic;
		FTDI_TXEN : IN std_logic;
		FTDI_CLK : IN std_logic;   
		FTDI_ADBUS : INOUT std_logic_vector(31 downto 0);      
		FTDI_RDN : OUT std_logic;
		FTDI_TXN : OUT std_logic;
		FTDI_OEN : OUT std_logic;
		FTDI_SIWU : OUT std_logic;
		FTDI_BE : inout std_logic_vector(3 downto 0);
		int_rd : OUT std_logic;
		int_wr : OUT std_logic;
		data_wr : OUT std_logic_vector(31 downto 0);
		data_rd : IN std_logic_vector(31 downto 0);		
		addr : OUT std_logic_vector(31 downto 0);
		req_read_data : OUT std_logic;
		input_fifo_empty : IN std_logic;
		input_fifo_valid : IN STD_LOGIC;
		fifo_address_full : IN std_logic; 
		send_shit : OUT STD_LOGIC;
		fifo_reset : OUT std_logic
		);
	END COMPONENT;
	

	
	-- SEGNALI INTERNI
			  
	signal  int_rd 	: STD_LOGIC;
	signal  int_wr 	: STD_LOGIC;
	signal  data_rd 	: STD_LOGIC_VECTOR(31 downto 0) := x"00000000";
	signal  data_wr 	: STD_LOGIC_VECTOR(31 downto 0);
	signal  core_addr 		: STD_LOGIC_VECTOR(31 downto 0);
	
	signal  addr_wrt		: STD_LOGIC;
	signal  addr_empty 	: STD_LOGIC;
	
	signal  BUS_ADDR 		: STD_LOGIC_VECTOR(31 downto 0) := x"00000000";
	signal  BUS_DATA_WR 	: STD_LOGIC_VECTOR(31 downto 0) := x"00000000";
	signal  BUS_DATA_RD 	: STD_LOGIC_VECTOR(31 downto 0) := x"00000000";
	signal  BUS_INT_RD 	: STD_LOGIC:='0';
	signal  BUS_INT_WR 	: STD_LOGIC:='0';
	signal  BUS_DATASTROBE: STD_LOGIC:='0';
	signal  i_BUS_DATASTROBE: STD_LOGIC:='0';
	
	signal  req_read_data : STD_LOGIC; 

	signal  SYNC_INT_RD 	: STD_LOGIC:='0';
	signal  SYNC_INT_WR 	: STD_LOGIC:='0';
	
	signal CLK : STD_LOGIC;
	
	signal reset : std_logic;
	
	signal invFTDI_CLK : STD_LOGIC := '0';
	
	signal fifo_reset : std_logic;
	signal fifo_reset2 : std_logic;
	
	signal input_fifo_empty :  STD_LOGIC :='0';
	
	signal fifo_address_full : STD_LOGIC := '0';
	
	signal data_read_full : STD_LOGIC := '0';
	
	signal not_full_and_pending : STD_LOGIC := '0';
	signal pending : STD_LOGIC := '0';
	
	signal i_f_MODE : STD_LOGIC := '0';
	
    signal addr_empty_d : std_logic := '1';
    

			
	signal add_fifo_rd : std_logic := '0';
	
	signal f_BUS_ADDR 		 :  STD_LOGIC_VECTOR(31 downto 0);	--INDIRIZZO DI LETTURA/SCRITTURA
	
	signal f_ENDIAN			 :  STD_LOGIC:='0';					--ENDIAN DEL PC (0: BIG 1:LITTLE)
	
	--DA FPGA A PC
	signal f_BUS_INT_RD 	 :  STD_LOGIC;						--INTERRUPT DI LETTURA
	signal f_BUS_DATASTROBE  :  STD_LOGIC;						--CONFERMA CHE I DATI RICHIESTI SONO DISPONIBILI
	signal f_BUS_DATASTROBE_REG  :  STD_LOGIC;						--CONFERMA CHE I DATI RICHIESTI SONO DISPONIBILI (REGISTRI)
	signal f_BUS_DATA_RD	 :  STD_LOGIC_VECTOR(31 downto 0);	--DATI DA INVIARE AL PC
	signal f_BUS_DATA_RD_REG :  STD_LOGIC_VECTOR(31 downto 0);	--DATI DA INVIARE AL PC (REGISTRI)
	signal f_MODE		     :  STD_LOGIC := '0';					--0 IL SEGNALE DATASROBE E' ABILITAO, 1 DATI CAMPIONATI UN CICLO DOPO INT_RD
	
	--DA PC A FPGA
	signal f_BUS_INT_WR 	 :  STD_LOGIC;						--INTERRUPT DI SCRITTURA
	signal f_BUS_DATA_WR	 :  STD_LOGIC_VECTOR(31 downto 0);	--DATI DA INVIATI DAL PC
	signal wreg				 :  STD_LOGIC_VECTOR(31 downto 0);
	signal addr 			 : STD_LOGIC_VECTOR(31 downto 0);
	
	
	attribute keep : string; 
	attribute keep of int_rd: signal is "true";	
	attribute keep of int_wr: signal is "true";	
	attribute keep of data_rd: signal is "true";	
	attribute keep of data_wr: signal is "true";	
	attribute keep of addr: signal is "true";	

	attribute keep of BUS_ADDR: signal is "true";
	attribute keep of f_BUS_ADDR: signal is "true";		
	attribute keep of BUS_DATA_WR: signal is "true";	
	attribute keep of f_BUS_DATA_WR: signal is "true";
	attribute keep of BUS_DATA_RD: signal is "true";	
	attribute keep of BUS_INT_RD: signal is "true";	
	attribute keep of BUS_INT_WR: signal is "true";	
	attribute keep of BUS_DATASTROBE: signal is "true";	
	
	attribute keep of SYNC_INT_WR: signal is "true";	
	attribute keep of addr_empty: signal is "true";
				
	signal data_fifo_full :std_logic;
	signal input_fifo_valid : std_logic;
	signal send_sheet :  STD_LOGIC;
	signal send_sheet_sync :  STD_LOGIC;
	
	attribute keep of send_sheet: signal is "true";
	attribute keep of send_sheet_sync: signal is "true";
begin



xpm_cdc_single_inst: xpm_cdc_single
generic map (
DEST_SYNC_FF => 4, -- integer; range: 2-10
SIM_ASSERT_CHK => 0, -- integer; 0=disable simulation messages, 1=enable simulation messages
SRC_INPUT_REG => 1 -- integer; 0=do not register input, 1=register input
)
port map (
src_clk => invFTDI_CLK, -- optional; required when SRC_INPUT_REG = 1
src_in => send_sheet,
dest_clk => clk,
dest_out => send_sheet_sync
);
	
	
--FT232H
	invFTDI_CLK <=  FTDI_CLK;
	--FT2232H
	--invFTDI_CLK <= not FTDI_CLK;

	Inst_ft600_fifo245_core: ft600_fifo245_core PORT MAP(
        EEMOSI => EEMOSI,
        EEMISO => EEMISO,
        EECLK => EECLK,
        EECS => EECS,	
        license_ok => license_ok,
		reset => reset,
		FTDI_ADBUS => FTDI_ADBUS,
		FTDI_RXFN => FTDI_RXFN,
		FTDI_TXEN => FTDI_TXEN,
		FTDI_RDN => FTDI_RDN,
		FTDI_TXN => FTDI_TXN,
		FTDI_CLK => FTDI_CLK,
		FTDI_OEN => FTDI_OEN,
		FTDI_SIWU => FTDI_SIWU,
		FTDI_BE => FTDI_BE,
		int_rd => int_rd ,
		int_wr => int_wr,
		data_rd => data_rd,
		data_wr => data_wr,
		addr => core_addr,
		req_read_data => req_read_data,
		fifo_reset => fifo_reset,
		input_fifo_empty => input_fifo_empty,
		input_fifo_valid => input_fifo_valid,
		send_shit => send_sheet,
		fifo_address_full =>  fifo_address_full
	);



	addr_wrt <= int_rd or int_wr;
	
	fifo_reset2 <= reset or fifo_reset;
	
	ADDRESS_FIFO : FTDI_FIFO_AW
		port map (
			rst => fifo_reset2,
			wr_clk => invFTDI_CLK,
			rd_clk => clk,
			din(65 downto 34) => data_wr,
			din(33) => int_rd,
			din(32) => int_wr,
			din(31 downto 0) => core_addr,
			wr_en => addr_wrt,
			rd_en => add_fifo_rd,
			dout(65 downto 34) => BUS_DATA_WR,
			dout(33) => SYNC_INT_RD,
			dout(32) => SYNC_INT_WR,
			dout(31 downto 0) => BUS_ADDR,
			full => open,
			empty => addr_empty,
			prog_empty => open,
			prog_full => fifo_address_full
			);
    
    add_fifo_rd <= not_full_and_pending and (not addr_empty) ;
	not_full_and_pending <= (not data_read_full) and (not pending);
	BUS_INT_RD <= SYNC_INT_RD and (not addr_empty) and (not_full_and_pending);
	BUS_INT_WR <= SYNC_INT_WR and (not addr_empty_d) and (not_full_and_pending);
	
	--led <= BUS_INT_RD or BUS_INT_WR;

--	DATAWRITE_FIFO : FTDI_FIFOs
--		port map (
--			rst => reset,
--			wr_clk => invFTDI_CLK,
--			rd_clk => clk,
--			din(33 downto 32) => "00",
--			din(31 downto 0) => data_wr,
--			wr_en => int_wr,
--			rd_en => add_fifo_rd,
--			dout(31 downto 0) => BUS_DATA_WR,
--			dout(33 downto 32) => open,
--			full => open,
--			empty => open);


	DATA_READ_FIFO : FTDI_FIFOs
		port map (
			rst => fifo_reset2,
			wr_clk => clk,
			rd_clk => invFTDI_CLK,
		--	din(65 downto 34) => X"00000000",
			din(33 downto 32) => "00",
			din(31 downto 0) => BUS_DATA_RD,
			wr_en => BUS_DATASTROBE,
			rd_en => req_read_data,
		--	dout(65 downto 34) => OPEN,
			dout(31 downto 0) => data_rd,
			dout(33 downto 32) => open,
			full => open,
			prog_full => data_read_full,
			prog_empty => open,
			empty => input_fifo_empty,
			valid => input_fifo_valid);


	CLK <= f_CLK;
	reset <= f_RESET;


BUS_CP_0_R_INT(0) <= f_BUS_INT_RD when (addr >= x"00200000" And addr < x"00200001") else '0';BUS_CitirocFrame0_R_INT(0) <= f_BUS_INT_RD when (addr >= x"0002001A" And addr < x"0002001B") else '0';BUS_DTWC_R_INT(0) <= f_BUS_INT_RD when (addr >= x"00300000" And addr < x"00300001") else '0';BUS_RateMeter_2_R_INT(0) <= f_BUS_INT_RD when (addr >= x"00030000" And addr < x"00040000") else '0';
BUS_RateMeter_2_READ_ADDRESS <= BUS_ADDR(15 downto 0) when (addr >= x"00030000" And addr < x"00040000") else (others => '0');BUS_RateMeter_3_R_INT(0) <= f_BUS_INT_RD when (addr >= x"00050000" And addr < x"00060000") else '0';
BUS_RateMeter_3_READ_ADDRESS <= BUS_ADDR(15 downto 0) when (addr >= x"00050000" And addr < x"00060000") else (others => '0');BUS_RateMeter_0_R_INT(0) <= f_BUS_INT_RD when (addr >= x"00070000" And addr < x"00080000") else '0';
BUS_RateMeter_0_READ_ADDRESS <= BUS_ADDR(15 downto 0) when (addr >= x"00070000" And addr < x"00080000") else (others => '0');BUS_RateMeter_1_R_INT(0) <= f_BUS_INT_RD when (addr >= x"000D0000" And addr < x"000E0000") else '0';
BUS_RateMeter_1_READ_ADDRESS <= BUS_ADDR(15 downto 0) when (addr >= x"000D0000" And addr < x"000E0000") else (others => '0');BUS_Oscilloscope_0_R_INT(0) <= f_BUS_INT_RD when (addr >= x"00090000" And addr < x"00090800") else '0';
BUS_Oscilloscope_0_READ_ADDRESS <= BUS_ADDR(10 downto 0) when (addr >= x"00090000" And addr < x"00090800") else (others => '0');BUS_Oscilloscope_1_R_INT(0) <= f_BUS_INT_RD when (addr >= x"000B0000" And addr < x"000B0800") else '0';
BUS_Oscilloscope_1_READ_ADDRESS <= BUS_ADDR(10 downto 0) when (addr >= x"000B0000" And addr < x"000B0800") else (others => '0');BUS_Oscilloscope_2_R_INT(0) <= f_BUS_INT_RD when (addr >= x"000F0000" And addr < x"000F0800") else '0';
BUS_Oscilloscope_2_READ_ADDRESS <= BUS_ADDR(10 downto 0) when (addr >= x"000F0000" And addr < x"000F0800") else (others => '0');BUS_Oscilloscope_3_R_INT(0) <= f_BUS_INT_RD when (addr >= x"00010000" And addr < x"00010800") else '0';
BUS_Oscilloscope_3_READ_ADDRESS <= BUS_ADDR(10 downto 0) when (addr >= x"00010000" And addr < x"00010800") else (others => '0');
f_BUS_DATA_RD <= BUS_Test_0_READ_DATA when  (addr >= x"FFFD0000" And addr < x"FFFDFFFF") else 
 BUS_FLASH_0_READ_DATA when (addr >= x"FFFE0000" And addr < x"FFFEE000") else 
 BUS_CP_0_READ_DATA when (addr >= x"00200000" And addr < x"00200001") else  BUS_CitirocFrame0_READ_DATA when (addr >= x"0002001A" And addr < x"0002001B") else  BUS_DTWC_READ_DATA when (addr >= x"00300000" And addr < x"00300001") else BUS_RateMeter_2_READ_DATA  when  addr >= x"00030000" and addr < x"00040000" else 
BUS_RateMeter_3_READ_DATA  when  addr >= x"00050000" and addr < x"00060000" else 
BUS_RateMeter_0_READ_DATA  when  addr >= x"00070000" and addr < x"00080000" else 
BUS_RateMeter_1_READ_DATA  when  addr >= x"000D0000" and addr < x"000E0000" else 
BUS_Oscilloscope_0_READ_DATA  when  addr >= x"00090000" and addr < x"00090800" else 
BUS_Oscilloscope_1_READ_DATA  when  addr >= x"000B0000" and addr < x"000B0800" else 
BUS_Oscilloscope_2_READ_DATA  when  addr >= x"000F0000" and addr < x"000F0800" else 
BUS_Oscilloscope_3_READ_DATA  when  addr >= x"00010000" and addr < x"00010800" else 
 f_BUS_DATA_RD_REG;
 f_BUS_DATASTROBE <=BUS_Test_0_VLD(0) when  (addr >= x"FFFD0000" And addr < x"FFFDFFFF") else 
BUS_FLASH_0_VLD(0) when (addr >= x"FFFE0000" And addr < x"FFFEE000") else 
  BUS_CP_0_VLD(0) when (addr >= x"00200000" And addr < x"00200001") else   BUS_CitirocFrame0_VLD(0) when (addr >= x"0002001A" And addr < x"0002001B") else   BUS_DTWC_VLD(0) when (addr >= x"00300000" And addr < x"00300001") else  BUS_RateMeter_2_VLD(0) when  addr >= x"00030000" and addr < x"00040000" else 
 BUS_RateMeter_3_VLD(0) when  addr >= x"00050000" and addr < x"00060000" else 
 BUS_RateMeter_0_VLD(0) when  addr >= x"00070000" and addr < x"00080000" else 
 BUS_RateMeter_1_VLD(0) when  addr >= x"000D0000" and addr < x"000E0000" else 
 BUS_Oscilloscope_0_VLD(0) when  addr >= x"00090000" and addr < x"00090800" else 
 BUS_Oscilloscope_1_VLD(0) when  addr >= x"000B0000" and addr < x"000B0800" else 
 BUS_Oscilloscope_2_VLD(0) when  addr >= x"000F0000" and addr < x"000F0800" else 
 BUS_Oscilloscope_3_VLD(0) when  addr >= x"00010000" and addr < x"00010800" else 
 f_BUS_DATASTROBE_REG;

	
    --f_BUS_DATA_RD    <=     BUS_Test_0_READ_DATA when  (addr >= x"FFFD0000" And addr < x"FFFDFFFF") else 
    --                        BUS_FLASH_0_READ_DATA when (addr >= x"FFFE0000" And addr < x"FFFEE000") else f_BUS_DATA_RD_REG;
                            
    --f_BUS_DATASTROBE <=     BUS_Test_0_VLD(0) when  (addr >= x"FFFD0000" And addr < x"FFFDFFFF") else
    --                        BUS_FLASH_0_VLD(0) when (addr >= x"FFFE0000" And addr < x"FFFEE000") else f_BUS_DATASTROBE_REG;

    BUS_FLASH_0_R_INT(0) <= f_BUS_INT_RD when (addr >= x"FFFE0000" And addr < x"FFFEE000") else '0';
    BUS_Test_0_R_INT(0) <= f_BUS_INT_RD when (addr >= x"FFFD0000" And addr < x"FFFDFFFF") else '0';
                            
    
    BUS_Test_0_ADDRESS  <=  BUS_ADDR(15 downto 0) when (addr >= x"FFFD0000" And addr < x"FFFDFFFF") else (others => '0');
    BUS_FLASH_0_ADDRESS  <= BUS_ADDR(15 downto 0) when (addr >= x"FFFE0000" And addr < x"FFFEE000") else (others => '0');
    
    BUS_Test_0_WRITE_DATA  <= f_BUS_DATA_WR;
    BUS_FLASH_0_WRITE_DATA  <= f_BUS_DATA_WR;
    
    
    BUS_Test_0_W_INT (0) <=  f_BUS_INT_WR when (addr >= x"FFFD0000" And addr < x"FFFDFFFF") else '0';
    BUS_FLASH_0_W_INT (0) <=  f_BUS_INT_WR when (addr >= x"FFFE0000" And addr < x"FFFEE000") else '0';
    
	i_f_MODE <= f_MODE;
	
	f_BUS_ADDR <= BUS_ADDR;
	
	f_BUS_INT_RD <= BUS_INT_RD and( not send_sheet_sync);
		
	BUS_DATASTROBE <=i_BUS_DATASTROBE;-- f_BUS_DATASTROBE when i_f_MODE = '0' else i_BUS_DATASTROBE;
	BUS_DATA_RD <= f_BUS_DATA_RD when f_ENDIAN = '0' else f_BUS_DATA_RD(7 downto 0) & f_BUS_DATA_RD(15 downto 8) & f_BUS_DATA_RD(23 downto 16) & f_BUS_DATA_RD(31 downto 24);
	
	f_BUS_INT_WR <= BUS_INT_WR;
	f_BUS_DATA_WR <= BUS_DATA_WR when f_ENDIAN = '0' else BUS_DATA_WR(7 downto 0) & BUS_DATA_WR(15 downto 8) & BUS_DATA_WR(23 downto 16) & BUS_DATA_WR(31 downto 24);
	addr <= f_BUS_ADDR;
	

	
	-- intDS : process(clk)
	-- begin
		-- if reset='1' then
			-- i_BUS_DATASTROBE <= '0';
		-- elsif rising_edge(clk) then
	    -- addr_empty_d <= addr_empty;
		  
			-- i_BUS_DATASTROBE <= '0';
			
			-- if BUS_INT_RD = '1' then
			----	i_BUS_DATASTROBE <= '1';--(i_f_MODE  or f_BUS_DATASTROBE ) ;
				-- if i_f_MODE = '0' then
					-- pending <= '1';
				-- end if;
			-- end if;		
			
			-- if i_f_MODE = '0' and ((f_BUS_DATASTROBE = '1' and pending ='1') or (send_sheet_sync = '1')) then
				-- pending <= '0';
				-- i_BUS_DATASTROBE <= '1';
			-- end if;

		-- end if;
	
	-- end process;
	
	
	
	intDS : process(clk)
	begin
		if reset='1' then
			i_BUS_DATASTROBE <= '0';
		elsif rising_edge(clk) then
		
		    addr_empty_d <= addr_empty;
		  
			i_BUS_DATASTROBE <= '0';
			
			if BUS_INT_RD = '1' then
				i_BUS_DATASTROBE <= '1';--(i_f_MODE  or f_BUS_DATASTROBE ) ;
				if i_f_MODE = '0' then
					pending <= '1';
				end if;
			end if;		
			
			if i_f_MODE = '0' and ((f_BUS_DATASTROBE = '1') or (send_sheet_sync = '1')) then
				pending <= '0';
			end if;

		end if;
	
	end process;	
	
	
	--SCICOMPILER COSTUMIZABLE REGISTER FILE
	
	
	wreg <= f_BUS_DATA_WR;
	
	register_manager : process(clk)
		variable rreg	:  STD_LOGIC_VECTOR(31 downto 0);
	begin
		if reset='1' then
					REG_TRIG_A_SEL_WR <= (others => '0');
		INT_TRIG_A_SEL_WR <= "0";
		INT_TRIG_A_SEL_RD <= "0";
		REG_VET_A_EN_WR <= (others => '0');
		INT_VET_A_EN_WR <= "0";
		INT_VET_A_EN_RD <= "0";
		REG_VET_B_EN_WR <= (others => '0');
		INT_VET_B_EN_WR <= "0";
		INT_VET_B_EN_RD <= "0";
		REG_VET_C_EN_WR <= (others => '0');
		INT_VET_C_EN_WR <= "0";
		INT_VET_C_EN_RD <= "0";
		REG_VET_D_EN_WR <= (others => '0');
		INT_VET_D_EN_WR <= "0";
		INT_VET_D_EN_RD <= "0";
		REG_SW_VET_A_WR <= (others => '0');
		INT_SW_VET_A_WR <= "0";
		INT_SW_VET_A_RD <= "0";
		REG_SW_VET_B_WR <= (others => '0');
		INT_SW_VET_B_WR <= "0";
		INT_SW_VET_B_RD <= "0";
		REG_SW_VET_C_WR <= (others => '0');
		INT_SW_VET_C_WR <= "0";
		INT_SW_VET_C_RD <= "0";
		REG_SW_VET_D_WR <= (others => '0');
		INT_SW_VET_D_WR <= "0";
		INT_SW_VET_D_RD <= "0";
		REG_TRIG_GBL_SEL_WR <= (others => '0');
		INT_TRIG_GBL_SEL_WR <= "0";
		INT_TRIG_GBL_SEL_RD <= "0";
		REG_EXT_DELAY_WR <= (others => '0');
		INT_EXT_DELAY_WR <= "0";
		INT_EXT_DELAY_RD <= "0";
		REG_SW_TRIG_FREQ_WR <= (others => '0');
		INT_SW_TRIG_FREQ_WR <= "0";
		INT_SW_TRIG_FREQ_RD <= "0";
		REG_A_RATE_WR <= (others => '0');
		INT_A_RATE_WR <= "0";
		INT_A_RATE_RD <= "0";
		REG_B_RATE_WR <= (others => '0');
		INT_B_RATE_WR <= "0";
		INT_B_RATE_RD <= "0";
		REG_C_RATE_WR <= (others => '0');
		INT_C_RATE_WR <= "0";
		INT_C_RATE_RD <= "0";
		REG_D_RATE_WR <= (others => '0');
		INT_D_RATE_WR <= "0";
		INT_D_RATE_RD <= "0";
		REG_T0_COUNT_WR <= (others => '0');
		INT_T0_COUNT_WR <= "0";
		INT_T0_COUNT_RD <= "0";
		REG_A_TRG_WR <= (others => '0');
		INT_A_TRG_WR <= "0";
		INT_A_TRG_RD <= "0";
		REG_B_TRG_WR <= (others => '0');
		INT_B_TRG_WR <= "0";
		INT_B_TRG_RD <= "0";
		REG_C_TRG_WR <= (others => '0');
		INT_C_TRG_WR <= "0";
		INT_C_TRG_RD <= "0";
		REG_D_TRG_WR <= (others => '0');
		INT_D_TRG_WR <= "0";
		INT_D_TRG_RD <= "0";
		REG_RUNSTART_WR <= (others => '0');
		INT_RUNSTART_WR <= "0";
		INT_RUNSTART_RD <= "0";
		REG_RUN_TIME_LSB_WR <= (others => '0');
		INT_RUN_TIME_LSB_WR <= "0";
		INT_RUN_TIME_LSB_RD <= "0";
		REG_RUN_TIME_MSB_WR <= (others => '0');
		INT_RUN_TIME_MSB_WR <= "0";
		INT_RUN_TIME_MSB_RD <= "0";
		REG_DEAD_TIME_LSB_WR <= (others => '0');
		INT_DEAD_TIME_LSB_WR <= "0";
		INT_DEAD_TIME_LSB_RD <= "0";
		REG_DEAD_TIME_MSB_WR <= (others => '0');
		INT_DEAD_TIME_MSB_WR <= "0";
		INT_DEAD_TIME_MSB_RD <= "0";
		REG_A_LOST_WR <= (others => '0');
		INT_A_LOST_WR <= "0";
		INT_A_LOST_RD <= "0";
		REG_B_LOST_WR <= (others => '0');
		INT_B_LOST_WR <= "0";
		INT_B_LOST_RD <= "0";
		REG_C_LOST_WR <= (others => '0');
		INT_C_LOST_WR <= "0";
		INT_C_LOST_RD <= "0";
		REG_D_LOST_WR <= (others => '0');
		INT_D_LOST_WR <= "0";
		INT_D_LOST_RD <= "0";
	BUS_CitirocCfg1_W_INT <= "0";
		REG_CitirocCfg1_REG_CFG0_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG0_WR <= "0";
		REG_CitirocCfg1_REG_CFG1_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG1_WR <= "0";
		REG_CitirocCfg1_REG_CFG2_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG2_WR <= "0";
		REG_CitirocCfg1_REG_CFG3_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG3_WR <= "0";
		REG_CitirocCfg1_REG_CFG4_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG4_WR <= "0";
		REG_CitirocCfg1_REG_CFG5_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG5_WR <= "0";
		REG_CitirocCfg1_REG_CFG6_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG6_WR <= "0";
		REG_CitirocCfg1_REG_CFG7_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG7_WR <= "0";
		REG_CitirocCfg1_REG_CFG8_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG8_WR <= "0";
		REG_CitirocCfg1_REG_CFG9_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG9_WR <= "0";
		REG_CitirocCfg1_REG_CFG10_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG10_WR <= "0";
		REG_CitirocCfg1_REG_CFG11_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG11_WR <= "0";
		REG_CitirocCfg1_REG_CFG12_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG12_WR <= "0";
		REG_CitirocCfg1_REG_CFG13_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG13_WR <= "0";
		REG_CitirocCfg1_REG_CFG14_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG14_WR <= "0";
		REG_CitirocCfg1_REG_CFG15_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG15_WR <= "0";
		REG_CitirocCfg1_REG_CFG16_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG16_WR <= "0";
		REG_CitirocCfg1_REG_CFG17_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG17_WR <= "0";
		REG_CitirocCfg1_REG_CFG18_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG18_WR <= "0";
		REG_CitirocCfg1_REG_CFG19_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG19_WR <= "0";
		REG_CitirocCfg1_REG_CFG20_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG20_WR <= "0";
		REG_CitirocCfg1_REG_CFG21_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG21_WR <= "0";
		REG_CitirocCfg1_REG_CFG22_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG22_WR <= "0";
		REG_CitirocCfg1_REG_CFG23_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG23_WR <= "0";
		REG_CitirocCfg1_REG_CFG24_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG24_WR <= "0";
		REG_CitirocCfg1_REG_CFG25_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG25_WR <= "0";
		REG_CitirocCfg1_REG_CFG26_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG26_WR <= "0";
		REG_CitirocCfg1_REG_CFG27_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG27_WR <= "0";
		REG_CitirocCfg1_REG_CFG28_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG28_WR <= "0";
		REG_CitirocCfg1_REG_CFG29_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG29_WR <= "0";
		REG_CitirocCfg1_REG_CFG30_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG30_WR <= "0";
		REG_CitirocCfg1_REG_CFG31_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG31_WR <= "0";
		REG_CitirocCfg1_REG_CFG32_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG32_WR <= "0";
		REG_CitirocCfg1_REG_CFG33_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG33_WR <= "0";
		REG_CitirocCfg1_REG_CFG34_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG34_WR <= "0";
		REG_CitirocCfg1_REG_CFG35_WR <= (others => '0');
		INT_CitirocCfg1_REG_CFG35_WR <= "0";
		REG_CitirocCfg1_START_REG_CFG_WR <= (others => '0');
		INT_CitirocCfg1_START_REG_CFG_WR <= "0";
	BUS_CitirocCfg2_W_INT <= "0";
		REG_CitirocCfg2_REG_CFG0_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG0_WR <= "0";
		REG_CitirocCfg2_REG_CFG1_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG1_WR <= "0";
		REG_CitirocCfg2_REG_CFG2_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG2_WR <= "0";
		REG_CitirocCfg2_REG_CFG3_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG3_WR <= "0";
		REG_CitirocCfg2_REG_CFG4_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG4_WR <= "0";
		REG_CitirocCfg2_REG_CFG5_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG5_WR <= "0";
		REG_CitirocCfg2_REG_CFG6_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG6_WR <= "0";
		REG_CitirocCfg2_REG_CFG7_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG7_WR <= "0";
		REG_CitirocCfg2_REG_CFG8_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG8_WR <= "0";
		REG_CitirocCfg2_REG_CFG9_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG9_WR <= "0";
		REG_CitirocCfg2_REG_CFG10_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG10_WR <= "0";
		REG_CitirocCfg2_REG_CFG11_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG11_WR <= "0";
		REG_CitirocCfg2_REG_CFG12_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG12_WR <= "0";
		REG_CitirocCfg2_REG_CFG13_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG13_WR <= "0";
		REG_CitirocCfg2_REG_CFG14_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG14_WR <= "0";
		REG_CitirocCfg2_REG_CFG15_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG15_WR <= "0";
		REG_CitirocCfg2_REG_CFG16_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG16_WR <= "0";
		REG_CitirocCfg2_REG_CFG17_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG17_WR <= "0";
		REG_CitirocCfg2_REG_CFG18_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG18_WR <= "0";
		REG_CitirocCfg2_REG_CFG19_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG19_WR <= "0";
		REG_CitirocCfg2_REG_CFG20_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG20_WR <= "0";
		REG_CitirocCfg2_REG_CFG21_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG21_WR <= "0";
		REG_CitirocCfg2_REG_CFG22_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG22_WR <= "0";
		REG_CitirocCfg2_REG_CFG23_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG23_WR <= "0";
		REG_CitirocCfg2_REG_CFG24_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG24_WR <= "0";
		REG_CitirocCfg2_REG_CFG25_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG25_WR <= "0";
		REG_CitirocCfg2_REG_CFG26_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG26_WR <= "0";
		REG_CitirocCfg2_REG_CFG27_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG27_WR <= "0";
		REG_CitirocCfg2_REG_CFG28_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG28_WR <= "0";
		REG_CitirocCfg2_REG_CFG29_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG29_WR <= "0";
		REG_CitirocCfg2_REG_CFG30_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG30_WR <= "0";
		REG_CitirocCfg2_REG_CFG31_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG31_WR <= "0";
		REG_CitirocCfg2_REG_CFG32_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG32_WR <= "0";
		REG_CitirocCfg2_REG_CFG33_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG33_WR <= "0";
		REG_CitirocCfg2_REG_CFG34_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG34_WR <= "0";
		REG_CitirocCfg2_REG_CFG35_WR <= (others => '0');
		INT_CitirocCfg2_REG_CFG35_WR <= "0";
		REG_CitirocCfg2_START_REG_CFG_WR <= (others => '0');
		INT_CitirocCfg2_START_REG_CFG_WR <= "0";
	BUS_CitirocCfg3_W_INT <= "0";
		REG_CitirocCfg3_REG_CFG0_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG0_WR <= "0";
		REG_CitirocCfg3_REG_CFG1_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG1_WR <= "0";
		REG_CitirocCfg3_REG_CFG2_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG2_WR <= "0";
		REG_CitirocCfg3_REG_CFG3_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG3_WR <= "0";
		REG_CitirocCfg3_REG_CFG4_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG4_WR <= "0";
		REG_CitirocCfg3_REG_CFG5_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG5_WR <= "0";
		REG_CitirocCfg3_REG_CFG6_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG6_WR <= "0";
		REG_CitirocCfg3_REG_CFG7_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG7_WR <= "0";
		REG_CitirocCfg3_REG_CFG8_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG8_WR <= "0";
		REG_CitirocCfg3_REG_CFG9_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG9_WR <= "0";
		REG_CitirocCfg3_REG_CFG10_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG10_WR <= "0";
		REG_CitirocCfg3_REG_CFG11_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG11_WR <= "0";
		REG_CitirocCfg3_REG_CFG12_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG12_WR <= "0";
		REG_CitirocCfg3_REG_CFG13_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG13_WR <= "0";
		REG_CitirocCfg3_REG_CFG14_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG14_WR <= "0";
		REG_CitirocCfg3_REG_CFG15_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG15_WR <= "0";
		REG_CitirocCfg3_REG_CFG16_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG16_WR <= "0";
		REG_CitirocCfg3_REG_CFG17_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG17_WR <= "0";
		REG_CitirocCfg3_REG_CFG18_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG18_WR <= "0";
		REG_CitirocCfg3_REG_CFG19_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG19_WR <= "0";
		REG_CitirocCfg3_REG_CFG20_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG20_WR <= "0";
		REG_CitirocCfg3_REG_CFG21_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG21_WR <= "0";
		REG_CitirocCfg3_REG_CFG22_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG22_WR <= "0";
		REG_CitirocCfg3_REG_CFG23_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG23_WR <= "0";
		REG_CitirocCfg3_REG_CFG24_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG24_WR <= "0";
		REG_CitirocCfg3_REG_CFG25_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG25_WR <= "0";
		REG_CitirocCfg3_REG_CFG26_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG26_WR <= "0";
		REG_CitirocCfg3_REG_CFG27_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG27_WR <= "0";
		REG_CitirocCfg3_REG_CFG28_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG28_WR <= "0";
		REG_CitirocCfg3_REG_CFG29_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG29_WR <= "0";
		REG_CitirocCfg3_REG_CFG30_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG30_WR <= "0";
		REG_CitirocCfg3_REG_CFG31_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG31_WR <= "0";
		REG_CitirocCfg3_REG_CFG32_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG32_WR <= "0";
		REG_CitirocCfg3_REG_CFG33_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG33_WR <= "0";
		REG_CitirocCfg3_REG_CFG34_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG34_WR <= "0";
		REG_CitirocCfg3_REG_CFG35_WR <= (others => '0');
		INT_CitirocCfg3_REG_CFG35_WR <= "0";
		REG_CitirocCfg3_START_REG_CFG_WR <= (others => '0');
		INT_CitirocCfg3_START_REG_CFG_WR <= "0";
	BUS_CitirocCfg0_W_INT <= "0";
		REG_CitirocCfg0_REG_CFG0_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG0_WR <= "0";
		REG_CitirocCfg0_REG_CFG1_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG1_WR <= "0";
		REG_CitirocCfg0_REG_CFG2_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG2_WR <= "0";
		REG_CitirocCfg0_REG_CFG3_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG3_WR <= "0";
		REG_CitirocCfg0_REG_CFG4_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG4_WR <= "0";
		REG_CitirocCfg0_REG_CFG5_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG5_WR <= "0";
		REG_CitirocCfg0_REG_CFG6_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG6_WR <= "0";
		REG_CitirocCfg0_REG_CFG7_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG7_WR <= "0";
		REG_CitirocCfg0_REG_CFG8_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG8_WR <= "0";
		REG_CitirocCfg0_REG_CFG9_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG9_WR <= "0";
		REG_CitirocCfg0_REG_CFG10_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG10_WR <= "0";
		REG_CitirocCfg0_REG_CFG11_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG11_WR <= "0";
		REG_CitirocCfg0_REG_CFG12_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG12_WR <= "0";
		REG_CitirocCfg0_REG_CFG13_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG13_WR <= "0";
		REG_CitirocCfg0_REG_CFG14_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG14_WR <= "0";
		REG_CitirocCfg0_REG_CFG15_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG15_WR <= "0";
		REG_CitirocCfg0_REG_CFG16_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG16_WR <= "0";
		REG_CitirocCfg0_REG_CFG17_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG17_WR <= "0";
		REG_CitirocCfg0_REG_CFG18_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG18_WR <= "0";
		REG_CitirocCfg0_REG_CFG19_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG19_WR <= "0";
		REG_CitirocCfg0_REG_CFG20_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG20_WR <= "0";
		REG_CitirocCfg0_REG_CFG21_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG21_WR <= "0";
		REG_CitirocCfg0_REG_CFG22_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG22_WR <= "0";
		REG_CitirocCfg0_REG_CFG23_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG23_WR <= "0";
		REG_CitirocCfg0_REG_CFG24_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG24_WR <= "0";
		REG_CitirocCfg0_REG_CFG25_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG25_WR <= "0";
		REG_CitirocCfg0_REG_CFG26_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG26_WR <= "0";
		REG_CitirocCfg0_REG_CFG27_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG27_WR <= "0";
		REG_CitirocCfg0_REG_CFG28_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG28_WR <= "0";
		REG_CitirocCfg0_REG_CFG29_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG29_WR <= "0";
		REG_CitirocCfg0_REG_CFG30_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG30_WR <= "0";
		REG_CitirocCfg0_REG_CFG31_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG31_WR <= "0";
		REG_CitirocCfg0_REG_CFG32_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG32_WR <= "0";
		REG_CitirocCfg0_REG_CFG33_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG33_WR <= "0";
		REG_CitirocCfg0_REG_CFG34_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG34_WR <= "0";
		REG_CitirocCfg0_REG_CFG35_WR <= (others => '0');
		INT_CitirocCfg0_REG_CFG35_WR <= "0";
		REG_CitirocCfg0_START_REG_CFG_WR <= (others => '0');
		INT_CitirocCfg0_START_REG_CFG_WR <= "0";
		REG_T0_SOFT_FREQ_WR <= (others => '0');
		INT_T0_SOFT_FREQ_WR <= "0";
		INT_T0_SOFT_FREQ_RD <= "0";
		REG_T0_SEL_WR <= (others => '0');
		INT_T0_SEL_WR <= "0";
		INT_T0_SEL_RD <= "0";
		REG_HOLD_TIME_WR <= (others => '0');
		INT_HOLD_TIME_WR <= "0";
		INT_HOLD_TIME_RD <= "0";
		REG_FR_IFP_WR <= (others => '0');
		INT_FR_IFP_WR <= "0";
		INT_FR_IFP_RD <= "0";
		REG_FR_LIMIT_WR <= (others => '0');
		INT_FR_LIMIT_WR <= "0";
		INT_FR_LIMIT_RD <= "0";
		REG_FR_IFP2_WR <= (others => '0');
		INT_FR_IFP2_WR <= "0";
		INT_FR_IFP2_RD <= "0";
		REG_FR_MODE_WR <= (others => '0');
		INT_FR_MODE_WR <= "0";
		INT_FR_MODE_RD <= "0";
		REG_FR_DBG1_WR <= (others => '0');
		INT_FR_DBG1_WR <= "0";
		INT_FR_DBG1_RD <= "0";
		REG_FR_DBG2_WR <= (others => '0');
		INT_FR_DBG2_WR <= "0";
		INT_FR_DBG2_RD <= "0";
	BUS_CP_0_W_INT <= "0";
		INT_CP_0_READ_STATUS_RD <= "0";
		INT_CP_0_READ_VALID_WORDS_RD <= "0";
		REG_CP_0_CONFIG_WR <= (others => '0');
		INT_CP_0_CONFIG_WR <= "0";
	BUS_CitirocFrame0_W_INT <= "0";
		REG_CitirocFrame0_CONTROL_WR <= (others => '0');
		INT_CitirocFrame0_CONTROL_WR <= "0";
		INT_CitirocFrame0_STATUS_RD <= "0";
	BUS_DTWC_W_INT <= "0";
		REG_VALIDATION_CFG_WR <= (others => '0');
		INT_VALIDATION_CFG_WR <= "0";
		INT_VALIDATION_CFG_RD <= "0";
		REG_HV_ON_WR <= (others => '0');
		INT_HV_ON_WR <= "0";
		INT_HV_ON_RD <= "0";
		REG_HV_EMERGENCY_WR <= (others => '0');
		INT_HV_EMERGENCY_WR <= "0";
		INT_HV_EMERGENCY_RD <= "0";
		REG_HV_VOUT_WR <= (others => '0');
		INT_HV_VOUT_WR <= "0";
		INT_HV_VOUT_RD <= "0";
		REG_HV_ENTCOMP_WR <= (others => '0');
		INT_HV_ENTCOMP_WR <= "0";
		INT_HV_ENTCOMP_RD <= "0";
		REG_HV_TM_WR <= (others => '0');
		INT_HV_TM_WR <= "0";
		INT_HV_TM_RD <= "0";
		REG_HV_TQ_WR <= (others => '0');
		INT_HV_TQ_WR <= "0";
		INT_HV_TQ_RD <= "0";
		REG_HV_TCOEF_WR <= (others => '0');
		INT_HV_TCOEF_WR <= "0";
		INT_HV_TCOEF_RD <= "0";
		REG_HV_IMAX_WR <= (others => '0');
		INT_HV_IMAX_WR <= "0";
		INT_HV_IMAX_RD <= "0";
		REG_HV_RAMP_WR <= (others => '0');
		INT_HV_RAMP_WR <= "0";
		INT_HV_RAMP_RD <= "0";
		REG_HV_VMAX_WR <= (others => '0');
		INT_HV_VMAX_WR <= "0";
		INT_HV_VMAX_RD <= "0";
		REG_HV_MSTATUS_WR <= (others => '0');
		INT_HV_MSTATUS_WR <= "0";
		INT_HV_MSTATUS_RD <= "0";
		REG_HV_MVOUT_WR <= (others => '0');
		INT_HV_MVOUT_WR <= "0";
		INT_HV_MVOUT_RD <= "0";
		REG_HV_MTEMP_WR <= (others => '0');
		INT_HV_MTEMP_WR <= "0";
		INT_HV_MTEMP_RD <= "0";
		REG_HV_MVTARGET_WR <= (others => '0');
		INT_HV_MVTARGET_WR <= "0";
		INT_HV_MVTARGET_RD <= "0";
		REG_HV_MAVTARGET_WR <= (others => '0');
		INT_HV_MAVTARGET_WR <= "0";
		INT_HV_MAVTARGET_RD <= "0";
		REG_T_SENS1_WR <= (others => '0');
		INT_T_SENS1_WR <= "0";
		INT_T_SENS1_RD <= "0";
		REG_T_SENS2_WR <= (others => '0');
		INT_T_SENS2_WR <= "0";
		INT_T_SENS2_RD <= "0";
		REG_HV_MIOUT_WR <= (others => '0');
		INT_HV_MIOUT_WR <= "0";
		INT_HV_MIOUT_RD <= "0";
		REG_TRIGGER_OUT_W_WR <= (others => '0');
		INT_TRIGGER_OUT_W_WR <= "0";
		INT_TRIGGER_OUT_W_RD <= "0";
	BUS_RateMeter_2_W_INT <= "0";
	BUS_RateMeter_3_W_INT <= "0";
	BUS_RateMeter_0_W_INT <= "0";
	BUS_RateMeter_1_W_INT <= "0";
		REG_T0SW_WR <= (others => '0');
		INT_T0SW_WR <= "0";
		INT_T0SW_RD <= "0";
		REG_GTS_RESSEL_WR <= (others => '0');
		INT_GTS_RESSEL_WR <= "0";
		INT_GTS_RESSEL_RD <= "0";
		REG_TRIG_MASK_A_WR <= (others => '0');
		INT_TRIG_MASK_A_WR <= "0";
		INT_TRIG_MASK_A_RD <= "0";
		REG_TRIG_MASK_B_WR <= (others => '0');
		INT_TRIG_MASK_B_WR <= "0";
		INT_TRIG_MASK_B_RD <= "0";
		REG_TRIG_MASK_C_WR <= (others => '0');
		INT_TRIG_MASK_C_WR <= "0";
		INT_TRIG_MASK_C_RD <= "0";
		REG_TRIG_MASK_D_WR <= (others => '0');
		INT_TRIG_MASK_D_WR <= "0";
		INT_TRIG_MASK_D_RD <= "0";
	BUS_Oscilloscope_0_W_INT <= "0";
		INT_Oscilloscope_0_READ_STATUS_RD <= "0";
		INT_Oscilloscope_0_READ_POSITION_RD <= "0";
		REG_Oscilloscope_0_CONFIG_TRIGGER_MODE_WR <= (others => '0');
		INT_Oscilloscope_0_CONFIG_TRIGGER_MODE_WR <= "0";
		REG_Oscilloscope_0_CONFIG_PRETRIGGER_WR <= (others => '0');
		INT_Oscilloscope_0_CONFIG_PRETRIGGER_WR <= "0";
		REG_Oscilloscope_0_CONFIG_TRIGGER_LEVEL_WR <= (others => '0');
		INT_Oscilloscope_0_CONFIG_TRIGGER_LEVEL_WR <= "0";
		REG_Oscilloscope_0_CONFIG_ARM_WR <= (others => '0');
		INT_Oscilloscope_0_CONFIG_ARM_WR <= "0";
		REG_Oscilloscope_0_CONFIG_DECIMATOR_WR <= (others => '0');
		INT_Oscilloscope_0_CONFIG_DECIMATOR_WR <= "0";
	BUS_Oscilloscope_1_W_INT <= "0";
		INT_Oscilloscope_1_READ_STATUS_RD <= "0";
		INT_Oscilloscope_1_READ_POSITION_RD <= "0";
		REG_Oscilloscope_1_CONFIG_TRIGGER_MODE_WR <= (others => '0');
		INT_Oscilloscope_1_CONFIG_TRIGGER_MODE_WR <= "0";
		REG_Oscilloscope_1_CONFIG_PRETRIGGER_WR <= (others => '0');
		INT_Oscilloscope_1_CONFIG_PRETRIGGER_WR <= "0";
		REG_Oscilloscope_1_CONFIG_TRIGGER_LEVEL_WR <= (others => '0');
		INT_Oscilloscope_1_CONFIG_TRIGGER_LEVEL_WR <= "0";
		REG_Oscilloscope_1_CONFIG_ARM_WR <= (others => '0');
		INT_Oscilloscope_1_CONFIG_ARM_WR <= "0";
		REG_Oscilloscope_1_CONFIG_DECIMATOR_WR <= (others => '0');
		INT_Oscilloscope_1_CONFIG_DECIMATOR_WR <= "0";
	BUS_Oscilloscope_2_W_INT <= "0";
		INT_Oscilloscope_2_READ_STATUS_RD <= "0";
		INT_Oscilloscope_2_READ_POSITION_RD <= "0";
		REG_Oscilloscope_2_CONFIG_TRIGGER_MODE_WR <= (others => '0');
		INT_Oscilloscope_2_CONFIG_TRIGGER_MODE_WR <= "0";
		REG_Oscilloscope_2_CONFIG_PRETRIGGER_WR <= (others => '0');
		INT_Oscilloscope_2_CONFIG_PRETRIGGER_WR <= "0";
		REG_Oscilloscope_2_CONFIG_TRIGGER_LEVEL_WR <= (others => '0');
		INT_Oscilloscope_2_CONFIG_TRIGGER_LEVEL_WR <= "0";
		REG_Oscilloscope_2_CONFIG_ARM_WR <= (others => '0');
		INT_Oscilloscope_2_CONFIG_ARM_WR <= "0";
		REG_Oscilloscope_2_CONFIG_DECIMATOR_WR <= (others => '0');
		INT_Oscilloscope_2_CONFIG_DECIMATOR_WR <= "0";
	BUS_Oscilloscope_3_W_INT <= "0";
		INT_Oscilloscope_3_READ_STATUS_RD <= "0";
		INT_Oscilloscope_3_READ_POSITION_RD <= "0";
		REG_Oscilloscope_3_CONFIG_TRIGGER_MODE_WR <= (others => '0');
		INT_Oscilloscope_3_CONFIG_TRIGGER_MODE_WR <= "0";
		REG_Oscilloscope_3_CONFIG_PRETRIGGER_WR <= (others => '0');
		INT_Oscilloscope_3_CONFIG_PRETRIGGER_WR <= "0";
		REG_Oscilloscope_3_CONFIG_TRIGGER_LEVEL_WR <= (others => '0');
		INT_Oscilloscope_3_CONFIG_TRIGGER_LEVEL_WR <= "0";
		REG_Oscilloscope_3_CONFIG_ARM_WR <= (others => '0');
		INT_Oscilloscope_3_CONFIG_ARM_WR <= "0";
		REG_Oscilloscope_3_CONFIG_DECIMATOR_WR <= (others => '0');
		INT_Oscilloscope_3_CONFIG_DECIMATOR_WR <= "0";
		REG_T0_RESET_ON_START_WR <= (others => '0');
		INT_T0_RESET_ON_START_WR <= "0";
		INT_T0_RESET_ON_START_RD <= "0";
		REG_ISRUNNING_WR <= (others => '0');
		INT_ISRUNNING_WR <= "0";
		INT_ISRUNNING_RD <= "0";
		REG_VETO_WAIT_RUN_WR <= (others => '0');
		INT_VETO_WAIT_RUN_WR <= "0";
		INT_VETO_WAIT_RUN_RD <= "0";
		REG_GBL_EN_VETO_EXT_WR <= (others => '0');
		INT_GBL_EN_VETO_EXT_WR <= "0";
		INT_GBL_EN_VETO_EXT_RD <= "0";
		REG_INVETO_WR <= (others => '0');
		INT_INVETO_WR <= "0";
		INT_INVETO_RD <= "0";
		REG_TRG_OUT_MONOSTABLE_EN_WR <= (others => '0');
		INT_TRG_OUT_MONOSTABLE_EN_WR <= "0";
		INT_TRG_OUT_MONOSTABLE_EN_RD <= "0";
			
			f_BUS_DATASTROBE_REG <= '0';
            INT_FLASH_CNTR_RD <= "0";
            INT_FLASH_CNTR_RD <= "0";
            INT_FLASH_ADDRESS_WR <= "0";
            INT_FLASH_ADDRESS_RD <= "0";
            INT_Fiforeset_WR <= "0";
            INT_Fiforeset_RD <= "0";
			INT_EEPROM_WR							   <= "0";
			
			
		elsif rising_edge(clk) then
		INT_TRIG_A_SEL_WR <= "0";
		INT_TRIG_A_SEL_RD <= "0";
		INT_VET_A_EN_WR <= "0";
		INT_VET_A_EN_RD <= "0";
		INT_VET_B_EN_WR <= "0";
		INT_VET_B_EN_RD <= "0";
		INT_VET_C_EN_WR <= "0";
		INT_VET_C_EN_RD <= "0";
		INT_VET_D_EN_WR <= "0";
		INT_VET_D_EN_RD <= "0";
		INT_SW_VET_A_WR <= "0";
		INT_SW_VET_A_RD <= "0";
		INT_SW_VET_B_WR <= "0";
		INT_SW_VET_B_RD <= "0";
		INT_SW_VET_C_WR <= "0";
		INT_SW_VET_C_RD <= "0";
		INT_SW_VET_D_WR <= "0";
		INT_SW_VET_D_RD <= "0";
		INT_TRIG_GBL_SEL_WR <= "0";
		INT_TRIG_GBL_SEL_RD <= "0";
		INT_EXT_DELAY_WR <= "0";
		INT_EXT_DELAY_RD <= "0";
		INT_SW_TRIG_FREQ_WR <= "0";
		INT_SW_TRIG_FREQ_RD <= "0";
		INT_A_RATE_WR <= "0";
		INT_A_RATE_RD <= "0";
		INT_B_RATE_WR <= "0";
		INT_B_RATE_RD <= "0";
		INT_C_RATE_WR <= "0";
		INT_C_RATE_RD <= "0";
		INT_D_RATE_WR <= "0";
		INT_D_RATE_RD <= "0";
		INT_T0_COUNT_WR <= "0";
		INT_T0_COUNT_RD <= "0";
		INT_A_TRG_WR <= "0";
		INT_A_TRG_RD <= "0";
		INT_B_TRG_WR <= "0";
		INT_B_TRG_RD <= "0";
		INT_C_TRG_WR <= "0";
		INT_C_TRG_RD <= "0";
		INT_D_TRG_WR <= "0";
		INT_D_TRG_RD <= "0";
		INT_RUNSTART_WR <= "0";
		INT_RUNSTART_RD <= "0";
		INT_RUN_TIME_LSB_WR <= "0";
		INT_RUN_TIME_LSB_RD <= "0";
		INT_RUN_TIME_MSB_WR <= "0";
		INT_RUN_TIME_MSB_RD <= "0";
		INT_DEAD_TIME_LSB_WR <= "0";
		INT_DEAD_TIME_LSB_RD <= "0";
		INT_DEAD_TIME_MSB_WR <= "0";
		INT_DEAD_TIME_MSB_RD <= "0";
		INT_A_LOST_WR <= "0";
		INT_A_LOST_RD <= "0";
		INT_B_LOST_WR <= "0";
		INT_B_LOST_RD <= "0";
		INT_C_LOST_WR <= "0";
		INT_C_LOST_RD <= "0";
		INT_D_LOST_WR <= "0";
		INT_D_LOST_RD <= "0";
	BUS_CitirocCfg1_W_INT <= "0";
		INT_CitirocCfg1_REG_CFG0_WR <= "0";
		INT_CitirocCfg1_REG_CFG1_WR <= "0";
		INT_CitirocCfg1_REG_CFG2_WR <= "0";
		INT_CitirocCfg1_REG_CFG3_WR <= "0";
		INT_CitirocCfg1_REG_CFG4_WR <= "0";
		INT_CitirocCfg1_REG_CFG5_WR <= "0";
		INT_CitirocCfg1_REG_CFG6_WR <= "0";
		INT_CitirocCfg1_REG_CFG7_WR <= "0";
		INT_CitirocCfg1_REG_CFG8_WR <= "0";
		INT_CitirocCfg1_REG_CFG9_WR <= "0";
		INT_CitirocCfg1_REG_CFG10_WR <= "0";
		INT_CitirocCfg1_REG_CFG11_WR <= "0";
		INT_CitirocCfg1_REG_CFG12_WR <= "0";
		INT_CitirocCfg1_REG_CFG13_WR <= "0";
		INT_CitirocCfg1_REG_CFG14_WR <= "0";
		INT_CitirocCfg1_REG_CFG15_WR <= "0";
		INT_CitirocCfg1_REG_CFG16_WR <= "0";
		INT_CitirocCfg1_REG_CFG17_WR <= "0";
		INT_CitirocCfg1_REG_CFG18_WR <= "0";
		INT_CitirocCfg1_REG_CFG19_WR <= "0";
		INT_CitirocCfg1_REG_CFG20_WR <= "0";
		INT_CitirocCfg1_REG_CFG21_WR <= "0";
		INT_CitirocCfg1_REG_CFG22_WR <= "0";
		INT_CitirocCfg1_REG_CFG23_WR <= "0";
		INT_CitirocCfg1_REG_CFG24_WR <= "0";
		INT_CitirocCfg1_REG_CFG25_WR <= "0";
		INT_CitirocCfg1_REG_CFG26_WR <= "0";
		INT_CitirocCfg1_REG_CFG27_WR <= "0";
		INT_CitirocCfg1_REG_CFG28_WR <= "0";
		INT_CitirocCfg1_REG_CFG29_WR <= "0";
		INT_CitirocCfg1_REG_CFG30_WR <= "0";
		INT_CitirocCfg1_REG_CFG31_WR <= "0";
		INT_CitirocCfg1_REG_CFG32_WR <= "0";
		INT_CitirocCfg1_REG_CFG33_WR <= "0";
		INT_CitirocCfg1_REG_CFG34_WR <= "0";
		INT_CitirocCfg1_REG_CFG35_WR <= "0";
		INT_CitirocCfg1_START_REG_CFG_WR <= "0";
	BUS_CitirocCfg2_W_INT <= "0";
		INT_CitirocCfg2_REG_CFG0_WR <= "0";
		INT_CitirocCfg2_REG_CFG1_WR <= "0";
		INT_CitirocCfg2_REG_CFG2_WR <= "0";
		INT_CitirocCfg2_REG_CFG3_WR <= "0";
		INT_CitirocCfg2_REG_CFG4_WR <= "0";
		INT_CitirocCfg2_REG_CFG5_WR <= "0";
		INT_CitirocCfg2_REG_CFG6_WR <= "0";
		INT_CitirocCfg2_REG_CFG7_WR <= "0";
		INT_CitirocCfg2_REG_CFG8_WR <= "0";
		INT_CitirocCfg2_REG_CFG9_WR <= "0";
		INT_CitirocCfg2_REG_CFG10_WR <= "0";
		INT_CitirocCfg2_REG_CFG11_WR <= "0";
		INT_CitirocCfg2_REG_CFG12_WR <= "0";
		INT_CitirocCfg2_REG_CFG13_WR <= "0";
		INT_CitirocCfg2_REG_CFG14_WR <= "0";
		INT_CitirocCfg2_REG_CFG15_WR <= "0";
		INT_CitirocCfg2_REG_CFG16_WR <= "0";
		INT_CitirocCfg2_REG_CFG17_WR <= "0";
		INT_CitirocCfg2_REG_CFG18_WR <= "0";
		INT_CitirocCfg2_REG_CFG19_WR <= "0";
		INT_CitirocCfg2_REG_CFG20_WR <= "0";
		INT_CitirocCfg2_REG_CFG21_WR <= "0";
		INT_CitirocCfg2_REG_CFG22_WR <= "0";
		INT_CitirocCfg2_REG_CFG23_WR <= "0";
		INT_CitirocCfg2_REG_CFG24_WR <= "0";
		INT_CitirocCfg2_REG_CFG25_WR <= "0";
		INT_CitirocCfg2_REG_CFG26_WR <= "0";
		INT_CitirocCfg2_REG_CFG27_WR <= "0";
		INT_CitirocCfg2_REG_CFG28_WR <= "0";
		INT_CitirocCfg2_REG_CFG29_WR <= "0";
		INT_CitirocCfg2_REG_CFG30_WR <= "0";
		INT_CitirocCfg2_REG_CFG31_WR <= "0";
		INT_CitirocCfg2_REG_CFG32_WR <= "0";
		INT_CitirocCfg2_REG_CFG33_WR <= "0";
		INT_CitirocCfg2_REG_CFG34_WR <= "0";
		INT_CitirocCfg2_REG_CFG35_WR <= "0";
		INT_CitirocCfg2_START_REG_CFG_WR <= "0";
	BUS_CitirocCfg3_W_INT <= "0";
		INT_CitirocCfg3_REG_CFG0_WR <= "0";
		INT_CitirocCfg3_REG_CFG1_WR <= "0";
		INT_CitirocCfg3_REG_CFG2_WR <= "0";
		INT_CitirocCfg3_REG_CFG3_WR <= "0";
		INT_CitirocCfg3_REG_CFG4_WR <= "0";
		INT_CitirocCfg3_REG_CFG5_WR <= "0";
		INT_CitirocCfg3_REG_CFG6_WR <= "0";
		INT_CitirocCfg3_REG_CFG7_WR <= "0";
		INT_CitirocCfg3_REG_CFG8_WR <= "0";
		INT_CitirocCfg3_REG_CFG9_WR <= "0";
		INT_CitirocCfg3_REG_CFG10_WR <= "0";
		INT_CitirocCfg3_REG_CFG11_WR <= "0";
		INT_CitirocCfg3_REG_CFG12_WR <= "0";
		INT_CitirocCfg3_REG_CFG13_WR <= "0";
		INT_CitirocCfg3_REG_CFG14_WR <= "0";
		INT_CitirocCfg3_REG_CFG15_WR <= "0";
		INT_CitirocCfg3_REG_CFG16_WR <= "0";
		INT_CitirocCfg3_REG_CFG17_WR <= "0";
		INT_CitirocCfg3_REG_CFG18_WR <= "0";
		INT_CitirocCfg3_REG_CFG19_WR <= "0";
		INT_CitirocCfg3_REG_CFG20_WR <= "0";
		INT_CitirocCfg3_REG_CFG21_WR <= "0";
		INT_CitirocCfg3_REG_CFG22_WR <= "0";
		INT_CitirocCfg3_REG_CFG23_WR <= "0";
		INT_CitirocCfg3_REG_CFG24_WR <= "0";
		INT_CitirocCfg3_REG_CFG25_WR <= "0";
		INT_CitirocCfg3_REG_CFG26_WR <= "0";
		INT_CitirocCfg3_REG_CFG27_WR <= "0";
		INT_CitirocCfg3_REG_CFG28_WR <= "0";
		INT_CitirocCfg3_REG_CFG29_WR <= "0";
		INT_CitirocCfg3_REG_CFG30_WR <= "0";
		INT_CitirocCfg3_REG_CFG31_WR <= "0";
		INT_CitirocCfg3_REG_CFG32_WR <= "0";
		INT_CitirocCfg3_REG_CFG33_WR <= "0";
		INT_CitirocCfg3_REG_CFG34_WR <= "0";
		INT_CitirocCfg3_REG_CFG35_WR <= "0";
		INT_CitirocCfg3_START_REG_CFG_WR <= "0";
	BUS_CitirocCfg0_W_INT <= "0";
		INT_CitirocCfg0_REG_CFG0_WR <= "0";
		INT_CitirocCfg0_REG_CFG1_WR <= "0";
		INT_CitirocCfg0_REG_CFG2_WR <= "0";
		INT_CitirocCfg0_REG_CFG3_WR <= "0";
		INT_CitirocCfg0_REG_CFG4_WR <= "0";
		INT_CitirocCfg0_REG_CFG5_WR <= "0";
		INT_CitirocCfg0_REG_CFG6_WR <= "0";
		INT_CitirocCfg0_REG_CFG7_WR <= "0";
		INT_CitirocCfg0_REG_CFG8_WR <= "0";
		INT_CitirocCfg0_REG_CFG9_WR <= "0";
		INT_CitirocCfg0_REG_CFG10_WR <= "0";
		INT_CitirocCfg0_REG_CFG11_WR <= "0";
		INT_CitirocCfg0_REG_CFG12_WR <= "0";
		INT_CitirocCfg0_REG_CFG13_WR <= "0";
		INT_CitirocCfg0_REG_CFG14_WR <= "0";
		INT_CitirocCfg0_REG_CFG15_WR <= "0";
		INT_CitirocCfg0_REG_CFG16_WR <= "0";
		INT_CitirocCfg0_REG_CFG17_WR <= "0";
		INT_CitirocCfg0_REG_CFG18_WR <= "0";
		INT_CitirocCfg0_REG_CFG19_WR <= "0";
		INT_CitirocCfg0_REG_CFG20_WR <= "0";
		INT_CitirocCfg0_REG_CFG21_WR <= "0";
		INT_CitirocCfg0_REG_CFG22_WR <= "0";
		INT_CitirocCfg0_REG_CFG23_WR <= "0";
		INT_CitirocCfg0_REG_CFG24_WR <= "0";
		INT_CitirocCfg0_REG_CFG25_WR <= "0";
		INT_CitirocCfg0_REG_CFG26_WR <= "0";
		INT_CitirocCfg0_REG_CFG27_WR <= "0";
		INT_CitirocCfg0_REG_CFG28_WR <= "0";
		INT_CitirocCfg0_REG_CFG29_WR <= "0";
		INT_CitirocCfg0_REG_CFG30_WR <= "0";
		INT_CitirocCfg0_REG_CFG31_WR <= "0";
		INT_CitirocCfg0_REG_CFG32_WR <= "0";
		INT_CitirocCfg0_REG_CFG33_WR <= "0";
		INT_CitirocCfg0_REG_CFG34_WR <= "0";
		INT_CitirocCfg0_REG_CFG35_WR <= "0";
		INT_CitirocCfg0_START_REG_CFG_WR <= "0";
		INT_T0_SOFT_FREQ_WR <= "0";
		INT_T0_SOFT_FREQ_RD <= "0";
		INT_T0_SEL_WR <= "0";
		INT_T0_SEL_RD <= "0";
		INT_HOLD_TIME_WR <= "0";
		INT_HOLD_TIME_RD <= "0";
		INT_FR_IFP_WR <= "0";
		INT_FR_IFP_RD <= "0";
		INT_FR_LIMIT_WR <= "0";
		INT_FR_LIMIT_RD <= "0";
		INT_FR_IFP2_WR <= "0";
		INT_FR_IFP2_RD <= "0";
		INT_FR_MODE_WR <= "0";
		INT_FR_MODE_RD <= "0";
		INT_FR_DBG1_WR <= "0";
		INT_FR_DBG1_RD <= "0";
		INT_FR_DBG2_WR <= "0";
		INT_FR_DBG2_RD <= "0";
	BUS_CP_0_W_INT <= "0";
		INT_CP_0_READ_STATUS_RD <= "0";
		INT_CP_0_READ_VALID_WORDS_RD <= "0";
		INT_CP_0_CONFIG_WR <= "0";
	BUS_CitirocFrame0_W_INT <= "0";
		INT_CitirocFrame0_CONTROL_WR <= "0";
		INT_CitirocFrame0_STATUS_RD <= "0";
	BUS_DTWC_W_INT <= "0";
		INT_VALIDATION_CFG_WR <= "0";
		INT_VALIDATION_CFG_RD <= "0";
		INT_HV_ON_WR <= "0";
		INT_HV_ON_RD <= "0";
		INT_HV_EMERGENCY_WR <= "0";
		INT_HV_EMERGENCY_RD <= "0";
		INT_HV_VOUT_WR <= "0";
		INT_HV_VOUT_RD <= "0";
		INT_HV_ENTCOMP_WR <= "0";
		INT_HV_ENTCOMP_RD <= "0";
		INT_HV_TM_WR <= "0";
		INT_HV_TM_RD <= "0";
		INT_HV_TQ_WR <= "0";
		INT_HV_TQ_RD <= "0";
		INT_HV_TCOEF_WR <= "0";
		INT_HV_TCOEF_RD <= "0";
		INT_HV_IMAX_WR <= "0";
		INT_HV_IMAX_RD <= "0";
		INT_HV_RAMP_WR <= "0";
		INT_HV_RAMP_RD <= "0";
		INT_HV_VMAX_WR <= "0";
		INT_HV_VMAX_RD <= "0";
		INT_HV_MSTATUS_WR <= "0";
		INT_HV_MSTATUS_RD <= "0";
		INT_HV_MVOUT_WR <= "0";
		INT_HV_MVOUT_RD <= "0";
		INT_HV_MTEMP_WR <= "0";
		INT_HV_MTEMP_RD <= "0";
		INT_HV_MVTARGET_WR <= "0";
		INT_HV_MVTARGET_RD <= "0";
		INT_HV_MAVTARGET_WR <= "0";
		INT_HV_MAVTARGET_RD <= "0";
		INT_T_SENS1_WR <= "0";
		INT_T_SENS1_RD <= "0";
		INT_T_SENS2_WR <= "0";
		INT_T_SENS2_RD <= "0";
		INT_HV_MIOUT_WR <= "0";
		INT_HV_MIOUT_RD <= "0";
		INT_TRIGGER_OUT_W_WR <= "0";
		INT_TRIGGER_OUT_W_RD <= "0";
	BUS_RateMeter_2_W_INT <= "0";
	BUS_RateMeter_3_W_INT <= "0";
	BUS_RateMeter_0_W_INT <= "0";
	BUS_RateMeter_1_W_INT <= "0";
		INT_T0SW_WR <= "0";
		INT_T0SW_RD <= "0";
		INT_GTS_RESSEL_WR <= "0";
		INT_GTS_RESSEL_RD <= "0";
		INT_TRIG_MASK_A_WR <= "0";
		INT_TRIG_MASK_A_RD <= "0";
		INT_TRIG_MASK_B_WR <= "0";
		INT_TRIG_MASK_B_RD <= "0";
		INT_TRIG_MASK_C_WR <= "0";
		INT_TRIG_MASK_C_RD <= "0";
		INT_TRIG_MASK_D_WR <= "0";
		INT_TRIG_MASK_D_RD <= "0";
	BUS_Oscilloscope_0_W_INT <= "0";
		INT_Oscilloscope_0_READ_STATUS_RD <= "0";
		INT_Oscilloscope_0_READ_POSITION_RD <= "0";
		INT_Oscilloscope_0_CONFIG_TRIGGER_MODE_WR <= "0";
		INT_Oscilloscope_0_CONFIG_PRETRIGGER_WR <= "0";
		INT_Oscilloscope_0_CONFIG_TRIGGER_LEVEL_WR <= "0";
		INT_Oscilloscope_0_CONFIG_ARM_WR <= "0";
		INT_Oscilloscope_0_CONFIG_DECIMATOR_WR <= "0";
	BUS_Oscilloscope_1_W_INT <= "0";
		INT_Oscilloscope_1_READ_STATUS_RD <= "0";
		INT_Oscilloscope_1_READ_POSITION_RD <= "0";
		INT_Oscilloscope_1_CONFIG_TRIGGER_MODE_WR <= "0";
		INT_Oscilloscope_1_CONFIG_PRETRIGGER_WR <= "0";
		INT_Oscilloscope_1_CONFIG_TRIGGER_LEVEL_WR <= "0";
		INT_Oscilloscope_1_CONFIG_ARM_WR <= "0";
		INT_Oscilloscope_1_CONFIG_DECIMATOR_WR <= "0";
	BUS_Oscilloscope_2_W_INT <= "0";
		INT_Oscilloscope_2_READ_STATUS_RD <= "0";
		INT_Oscilloscope_2_READ_POSITION_RD <= "0";
		INT_Oscilloscope_2_CONFIG_TRIGGER_MODE_WR <= "0";
		INT_Oscilloscope_2_CONFIG_PRETRIGGER_WR <= "0";
		INT_Oscilloscope_2_CONFIG_TRIGGER_LEVEL_WR <= "0";
		INT_Oscilloscope_2_CONFIG_ARM_WR <= "0";
		INT_Oscilloscope_2_CONFIG_DECIMATOR_WR <= "0";
	BUS_Oscilloscope_3_W_INT <= "0";
		INT_Oscilloscope_3_READ_STATUS_RD <= "0";
		INT_Oscilloscope_3_READ_POSITION_RD <= "0";
		INT_Oscilloscope_3_CONFIG_TRIGGER_MODE_WR <= "0";
		INT_Oscilloscope_3_CONFIG_PRETRIGGER_WR <= "0";
		INT_Oscilloscope_3_CONFIG_TRIGGER_LEVEL_WR <= "0";
		INT_Oscilloscope_3_CONFIG_ARM_WR <= "0";
		INT_Oscilloscope_3_CONFIG_DECIMATOR_WR <= "0";
		INT_T0_RESET_ON_START_WR <= "0";
		INT_T0_RESET_ON_START_RD <= "0";
		INT_ISRUNNING_WR <= "0";
		INT_ISRUNNING_RD <= "0";
		INT_VETO_WAIT_RUN_WR <= "0";
		INT_VETO_WAIT_RUN_RD <= "0";
		INT_GBL_EN_VETO_EXT_WR <= "0";
		INT_GBL_EN_VETO_EXT_RD <= "0";
		INT_INVETO_WR <= "0";
		INT_INVETO_RD <= "0";
		INT_TRG_OUT_MONOSTABLE_EN_WR <= "0";
		INT_TRG_OUT_MONOSTABLE_EN_RD <= "0";
  
            f_BUS_DATASTROBE_REG <= '0';
            INT_FLASH_CNTR_RD <= "0";
            INT_FLASH_CNTR_RD <= "0";
            INT_FLASH_ADDRESS_WR <= "0";
            INT_FLASH_ADDRESS_RD <= "0";
            INT_Fiforeset_WR <= "0";
            INT_Fiforeset_RD <= "0";
			INT_EEPROM_WR							   <= "0";
            
           if f_BUS_INT_WR = '1' then
    
	           if addr = x"FFFFF908"  then
                REG_Fiforeset_WR    <= wreg; 
                INT_Fiforeset_WR <= "1"; 
				end if;		
			
               if addr = x"FFFEF000"  then
                   REG_FLASH_CNTR_WR     <= wreg; 
                   INT_FLASH_CNTR_WR <= "1"; 
               end if; 
    
               if addr = x"FFFEF001"  then
                   REG_FLASH_ADDRESS_WR     <= wreg; 
                   INT_FLASH_ADDRESS_WR <= "1"; 
               end if;                           
    
		if addr = x"00000003" then
			REG_TRIG_A_SEL_WR <= wreg; 
			INT_TRIG_A_SEL_WR <= "1"; 
		end if;
		if addr = x"00000004" then
			REG_VET_A_EN_WR <= wreg; 
			INT_VET_A_EN_WR <= "1"; 
		end if;
		if addr = x"00000005" then
			REG_VET_B_EN_WR <= wreg; 
			INT_VET_B_EN_WR <= "1"; 
		end if;
		if addr = x"00000006" then
			REG_VET_C_EN_WR <= wreg; 
			INT_VET_C_EN_WR <= "1"; 
		end if;
		if addr = x"00000007" then
			REG_VET_D_EN_WR <= wreg; 
			INT_VET_D_EN_WR <= "1"; 
		end if;
		if addr = x"00000008" then
			REG_SW_VET_A_WR <= wreg; 
			INT_SW_VET_A_WR <= "1"; 
		end if;
		if addr = x"00000009" then
			REG_SW_VET_B_WR <= wreg; 
			INT_SW_VET_B_WR <= "1"; 
		end if;
		if addr = x"0000000A" then
			REG_SW_VET_C_WR <= wreg; 
			INT_SW_VET_C_WR <= "1"; 
		end if;
		if addr = x"0000000B" then
			REG_SW_VET_D_WR <= wreg; 
			INT_SW_VET_D_WR <= "1"; 
		end if;
		if addr = x"0000000C" then
			REG_TRIG_GBL_SEL_WR <= wreg; 
			INT_TRIG_GBL_SEL_WR <= "1"; 
		end if;
		if addr = x"0000000D" then
			REG_EXT_DELAY_WR <= wreg; 
			INT_EXT_DELAY_WR <= "1"; 
		end if;
		if addr = x"0000000E" then
			REG_SW_TRIG_FREQ_WR <= wreg; 
			INT_SW_TRIG_FREQ_WR <= "1"; 
		end if;
		if addr = x"00020007" then
			REG_A_RATE_WR <= wreg; 
			INT_A_RATE_WR <= "1"; 
		end if;
		if addr = x"00020008" then
			REG_B_RATE_WR <= wreg; 
			INT_B_RATE_WR <= "1"; 
		end if;
		if addr = x"00020009" then
			REG_C_RATE_WR <= wreg; 
			INT_C_RATE_WR <= "1"; 
		end if;
		if addr = x"0002000A" then
			REG_D_RATE_WR <= wreg; 
			INT_D_RATE_WR <= "1"; 
		end if;
		if addr = x"0002000B" then
			REG_T0_COUNT_WR <= wreg; 
			INT_T0_COUNT_WR <= "1"; 
		end if;
		if addr = x"0002000C" then
			REG_A_TRG_WR <= wreg; 
			INT_A_TRG_WR <= "1"; 
		end if;
		if addr = x"0002000D" then
			REG_B_TRG_WR <= wreg; 
			INT_B_TRG_WR <= "1"; 
		end if;
		if addr = x"0002000E" then
			REG_C_TRG_WR <= wreg; 
			INT_C_TRG_WR <= "1"; 
		end if;
		if addr = x"0002000F" then
			REG_D_TRG_WR <= wreg; 
			INT_D_TRG_WR <= "1"; 
		end if;
		if addr = x"00020010" then
			REG_RUNSTART_WR <= wreg; 
			INT_RUNSTART_WR <= "1"; 
		end if;
		if addr = x"00020011" then
			REG_RUN_TIME_LSB_WR <= wreg; 
			INT_RUN_TIME_LSB_WR <= "1"; 
		end if;
		if addr = x"00020012" then
			REG_RUN_TIME_MSB_WR <= wreg; 
			INT_RUN_TIME_MSB_WR <= "1"; 
		end if;
		if addr = x"00020013" then
			REG_DEAD_TIME_LSB_WR <= wreg; 
			INT_DEAD_TIME_LSB_WR <= "1"; 
		end if;
		if addr = x"00020014" then
			REG_DEAD_TIME_MSB_WR <= wreg; 
			INT_DEAD_TIME_MSB_WR <= "1"; 
		end if;
		if addr = x"00020015" then
			REG_A_LOST_WR <= wreg; 
			INT_A_LOST_WR <= "1"; 
		end if;
		if addr = x"00020016" then
			REG_B_LOST_WR <= wreg; 
			INT_B_LOST_WR <= "1"; 
		end if;
		if addr = x"00020017" then
			REG_C_LOST_WR <= wreg; 
			INT_C_LOST_WR <= "1"; 
		end if;
		if addr = x"00020018" then
			REG_D_LOST_WR <= wreg; 
			INT_D_LOST_WR <= "1"; 
		end if;
		If addr >= x"00100008" And addr < x"00100009" Then
			BUS_CitirocCfg1_WRITE_DATA <= wreg; 
			BUS_CitirocCfg1_W_INT <= "1"; 
		End If;
		if addr = x"00100009" then
			REG_CitirocCfg1_REG_CFG0_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG0_WR <= "1"; 
		end if;
		if addr = x"0010000A" then
			REG_CitirocCfg1_REG_CFG1_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG1_WR <= "1"; 
		end if;
		if addr = x"0010000B" then
			REG_CitirocCfg1_REG_CFG2_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG2_WR <= "1"; 
		end if;
		if addr = x"0010000C" then
			REG_CitirocCfg1_REG_CFG3_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG3_WR <= "1"; 
		end if;
		if addr = x"0010000D" then
			REG_CitirocCfg1_REG_CFG4_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG4_WR <= "1"; 
		end if;
		if addr = x"0010000E" then
			REG_CitirocCfg1_REG_CFG5_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG5_WR <= "1"; 
		end if;
		if addr = x"0010000F" then
			REG_CitirocCfg1_REG_CFG6_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG6_WR <= "1"; 
		end if;
		if addr = x"00100010" then
			REG_CitirocCfg1_REG_CFG7_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG7_WR <= "1"; 
		end if;
		if addr = x"00100011" then
			REG_CitirocCfg1_REG_CFG8_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG8_WR <= "1"; 
		end if;
		if addr = x"00100012" then
			REG_CitirocCfg1_REG_CFG9_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG9_WR <= "1"; 
		end if;
		if addr = x"00100013" then
			REG_CitirocCfg1_REG_CFG10_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG10_WR <= "1"; 
		end if;
		if addr = x"00100014" then
			REG_CitirocCfg1_REG_CFG11_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG11_WR <= "1"; 
		end if;
		if addr = x"00100015" then
			REG_CitirocCfg1_REG_CFG12_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG12_WR <= "1"; 
		end if;
		if addr = x"00100016" then
			REG_CitirocCfg1_REG_CFG13_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG13_WR <= "1"; 
		end if;
		if addr = x"00100017" then
			REG_CitirocCfg1_REG_CFG14_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG14_WR <= "1"; 
		end if;
		if addr = x"00100018" then
			REG_CitirocCfg1_REG_CFG15_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG15_WR <= "1"; 
		end if;
		if addr = x"00100019" then
			REG_CitirocCfg1_REG_CFG16_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG16_WR <= "1"; 
		end if;
		if addr = x"0010001A" then
			REG_CitirocCfg1_REG_CFG17_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG17_WR <= "1"; 
		end if;
		if addr = x"0010001B" then
			REG_CitirocCfg1_REG_CFG18_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG18_WR <= "1"; 
		end if;
		if addr = x"0010001C" then
			REG_CitirocCfg1_REG_CFG19_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG19_WR <= "1"; 
		end if;
		if addr = x"0010001D" then
			REG_CitirocCfg1_REG_CFG20_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG20_WR <= "1"; 
		end if;
		if addr = x"0010001E" then
			REG_CitirocCfg1_REG_CFG21_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG21_WR <= "1"; 
		end if;
		if addr = x"0010001F" then
			REG_CitirocCfg1_REG_CFG22_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG22_WR <= "1"; 
		end if;
		if addr = x"00100020" then
			REG_CitirocCfg1_REG_CFG23_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG23_WR <= "1"; 
		end if;
		if addr = x"00100021" then
			REG_CitirocCfg1_REG_CFG24_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG24_WR <= "1"; 
		end if;
		if addr = x"00100022" then
			REG_CitirocCfg1_REG_CFG25_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG25_WR <= "1"; 
		end if;
		if addr = x"00100023" then
			REG_CitirocCfg1_REG_CFG26_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG26_WR <= "1"; 
		end if;
		if addr = x"00100024" then
			REG_CitirocCfg1_REG_CFG27_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG27_WR <= "1"; 
		end if;
		if addr = x"00100025" then
			REG_CitirocCfg1_REG_CFG28_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG28_WR <= "1"; 
		end if;
		if addr = x"00100026" then
			REG_CitirocCfg1_REG_CFG29_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG29_WR <= "1"; 
		end if;
		if addr = x"00100027" then
			REG_CitirocCfg1_REG_CFG30_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG30_WR <= "1"; 
		end if;
		if addr = x"00100028" then
			REG_CitirocCfg1_REG_CFG31_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG31_WR <= "1"; 
		end if;
		if addr = x"00100029" then
			REG_CitirocCfg1_REG_CFG32_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG32_WR <= "1"; 
		end if;
		if addr = x"0010002A" then
			REG_CitirocCfg1_REG_CFG33_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG33_WR <= "1"; 
		end if;
		if addr = x"0010002B" then
			REG_CitirocCfg1_REG_CFG34_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG34_WR <= "1"; 
		end if;
		if addr = x"0010002C" then
			REG_CitirocCfg1_REG_CFG35_WR <= wreg; 
			INT_CitirocCfg1_REG_CFG35_WR <= "1"; 
		end if;
		if addr = x"0010002D" then
			REG_CitirocCfg1_START_REG_CFG_WR <= wreg; 
			INT_CitirocCfg1_START_REG_CFG_WR <= "1"; 
		end if;
		If addr >= x"0010002F" And addr < x"00100030" Then
			BUS_CitirocCfg2_WRITE_DATA <= wreg; 
			BUS_CitirocCfg2_W_INT <= "1"; 
		End If;
		if addr = x"00100030" then
			REG_CitirocCfg2_REG_CFG0_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG0_WR <= "1"; 
		end if;
		if addr = x"00100031" then
			REG_CitirocCfg2_REG_CFG1_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG1_WR <= "1"; 
		end if;
		if addr = x"00100032" then
			REG_CitirocCfg2_REG_CFG2_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG2_WR <= "1"; 
		end if;
		if addr = x"00100033" then
			REG_CitirocCfg2_REG_CFG3_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG3_WR <= "1"; 
		end if;
		if addr = x"00100034" then
			REG_CitirocCfg2_REG_CFG4_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG4_WR <= "1"; 
		end if;
		if addr = x"00100035" then
			REG_CitirocCfg2_REG_CFG5_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG5_WR <= "1"; 
		end if;
		if addr = x"00100036" then
			REG_CitirocCfg2_REG_CFG6_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG6_WR <= "1"; 
		end if;
		if addr = x"00100037" then
			REG_CitirocCfg2_REG_CFG7_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG7_WR <= "1"; 
		end if;
		if addr = x"00100038" then
			REG_CitirocCfg2_REG_CFG8_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG8_WR <= "1"; 
		end if;
		if addr = x"00100039" then
			REG_CitirocCfg2_REG_CFG9_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG9_WR <= "1"; 
		end if;
		if addr = x"0010003A" then
			REG_CitirocCfg2_REG_CFG10_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG10_WR <= "1"; 
		end if;
		if addr = x"0010003B" then
			REG_CitirocCfg2_REG_CFG11_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG11_WR <= "1"; 
		end if;
		if addr = x"0010003C" then
			REG_CitirocCfg2_REG_CFG12_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG12_WR <= "1"; 
		end if;
		if addr = x"0010003D" then
			REG_CitirocCfg2_REG_CFG13_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG13_WR <= "1"; 
		end if;
		if addr = x"0010003E" then
			REG_CitirocCfg2_REG_CFG14_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG14_WR <= "1"; 
		end if;
		if addr = x"0010003F" then
			REG_CitirocCfg2_REG_CFG15_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG15_WR <= "1"; 
		end if;
		if addr = x"00100040" then
			REG_CitirocCfg2_REG_CFG16_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG16_WR <= "1"; 
		end if;
		if addr = x"00100041" then
			REG_CitirocCfg2_REG_CFG17_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG17_WR <= "1"; 
		end if;
		if addr = x"00100042" then
			REG_CitirocCfg2_REG_CFG18_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG18_WR <= "1"; 
		end if;
		if addr = x"00100043" then
			REG_CitirocCfg2_REG_CFG19_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG19_WR <= "1"; 
		end if;
		if addr = x"00100044" then
			REG_CitirocCfg2_REG_CFG20_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG20_WR <= "1"; 
		end if;
		if addr = x"00100045" then
			REG_CitirocCfg2_REG_CFG21_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG21_WR <= "1"; 
		end if;
		if addr = x"00100046" then
			REG_CitirocCfg2_REG_CFG22_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG22_WR <= "1"; 
		end if;
		if addr = x"00100047" then
			REG_CitirocCfg2_REG_CFG23_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG23_WR <= "1"; 
		end if;
		if addr = x"00100048" then
			REG_CitirocCfg2_REG_CFG24_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG24_WR <= "1"; 
		end if;
		if addr = x"00100049" then
			REG_CitirocCfg2_REG_CFG25_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG25_WR <= "1"; 
		end if;
		if addr = x"0010004A" then
			REG_CitirocCfg2_REG_CFG26_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG26_WR <= "1"; 
		end if;
		if addr = x"0010004B" then
			REG_CitirocCfg2_REG_CFG27_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG27_WR <= "1"; 
		end if;
		if addr = x"0010004C" then
			REG_CitirocCfg2_REG_CFG28_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG28_WR <= "1"; 
		end if;
		if addr = x"0010004D" then
			REG_CitirocCfg2_REG_CFG29_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG29_WR <= "1"; 
		end if;
		if addr = x"0010004E" then
			REG_CitirocCfg2_REG_CFG30_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG30_WR <= "1"; 
		end if;
		if addr = x"0010004F" then
			REG_CitirocCfg2_REG_CFG31_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG31_WR <= "1"; 
		end if;
		if addr = x"00100050" then
			REG_CitirocCfg2_REG_CFG32_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG32_WR <= "1"; 
		end if;
		if addr = x"00100051" then
			REG_CitirocCfg2_REG_CFG33_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG33_WR <= "1"; 
		end if;
		if addr = x"00100052" then
			REG_CitirocCfg2_REG_CFG34_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG34_WR <= "1"; 
		end if;
		if addr = x"00100053" then
			REG_CitirocCfg2_REG_CFG35_WR <= wreg; 
			INT_CitirocCfg2_REG_CFG35_WR <= "1"; 
		end if;
		if addr = x"00100054" then
			REG_CitirocCfg2_START_REG_CFG_WR <= wreg; 
			INT_CitirocCfg2_START_REG_CFG_WR <= "1"; 
		end if;
		If addr >= x"00100056" And addr < x"00100057" Then
			BUS_CitirocCfg3_WRITE_DATA <= wreg; 
			BUS_CitirocCfg3_W_INT <= "1"; 
		End If;
		if addr = x"00100057" then
			REG_CitirocCfg3_REG_CFG0_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG0_WR <= "1"; 
		end if;
		if addr = x"00100058" then
			REG_CitirocCfg3_REG_CFG1_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG1_WR <= "1"; 
		end if;
		if addr = x"00100059" then
			REG_CitirocCfg3_REG_CFG2_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG2_WR <= "1"; 
		end if;
		if addr = x"0010005A" then
			REG_CitirocCfg3_REG_CFG3_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG3_WR <= "1"; 
		end if;
		if addr = x"0010005B" then
			REG_CitirocCfg3_REG_CFG4_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG4_WR <= "1"; 
		end if;
		if addr = x"0010005C" then
			REG_CitirocCfg3_REG_CFG5_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG5_WR <= "1"; 
		end if;
		if addr = x"0010005D" then
			REG_CitirocCfg3_REG_CFG6_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG6_WR <= "1"; 
		end if;
		if addr = x"0010005E" then
			REG_CitirocCfg3_REG_CFG7_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG7_WR <= "1"; 
		end if;
		if addr = x"0010005F" then
			REG_CitirocCfg3_REG_CFG8_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG8_WR <= "1"; 
		end if;
		if addr = x"00100060" then
			REG_CitirocCfg3_REG_CFG9_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG9_WR <= "1"; 
		end if;
		if addr = x"00100061" then
			REG_CitirocCfg3_REG_CFG10_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG10_WR <= "1"; 
		end if;
		if addr = x"00100062" then
			REG_CitirocCfg3_REG_CFG11_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG11_WR <= "1"; 
		end if;
		if addr = x"00100063" then
			REG_CitirocCfg3_REG_CFG12_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG12_WR <= "1"; 
		end if;
		if addr = x"00100064" then
			REG_CitirocCfg3_REG_CFG13_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG13_WR <= "1"; 
		end if;
		if addr = x"00100065" then
			REG_CitirocCfg3_REG_CFG14_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG14_WR <= "1"; 
		end if;
		if addr = x"00100066" then
			REG_CitirocCfg3_REG_CFG15_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG15_WR <= "1"; 
		end if;
		if addr = x"00100067" then
			REG_CitirocCfg3_REG_CFG16_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG16_WR <= "1"; 
		end if;
		if addr = x"00100068" then
			REG_CitirocCfg3_REG_CFG17_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG17_WR <= "1"; 
		end if;
		if addr = x"00100069" then
			REG_CitirocCfg3_REG_CFG18_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG18_WR <= "1"; 
		end if;
		if addr = x"0010006A" then
			REG_CitirocCfg3_REG_CFG19_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG19_WR <= "1"; 
		end if;
		if addr = x"0010006B" then
			REG_CitirocCfg3_REG_CFG20_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG20_WR <= "1"; 
		end if;
		if addr = x"0010006C" then
			REG_CitirocCfg3_REG_CFG21_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG21_WR <= "1"; 
		end if;
		if addr = x"0010006D" then
			REG_CitirocCfg3_REG_CFG22_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG22_WR <= "1"; 
		end if;
		if addr = x"0010006E" then
			REG_CitirocCfg3_REG_CFG23_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG23_WR <= "1"; 
		end if;
		if addr = x"0010006F" then
			REG_CitirocCfg3_REG_CFG24_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG24_WR <= "1"; 
		end if;
		if addr = x"00100070" then
			REG_CitirocCfg3_REG_CFG25_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG25_WR <= "1"; 
		end if;
		if addr = x"00100071" then
			REG_CitirocCfg3_REG_CFG26_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG26_WR <= "1"; 
		end if;
		if addr = x"00100072" then
			REG_CitirocCfg3_REG_CFG27_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG27_WR <= "1"; 
		end if;
		if addr = x"00100073" then
			REG_CitirocCfg3_REG_CFG28_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG28_WR <= "1"; 
		end if;
		if addr = x"00100074" then
			REG_CitirocCfg3_REG_CFG29_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG29_WR <= "1"; 
		end if;
		if addr = x"00100075" then
			REG_CitirocCfg3_REG_CFG30_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG30_WR <= "1"; 
		end if;
		if addr = x"00100076" then
			REG_CitirocCfg3_REG_CFG31_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG31_WR <= "1"; 
		end if;
		if addr = x"00100077" then
			REG_CitirocCfg3_REG_CFG32_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG32_WR <= "1"; 
		end if;
		if addr = x"00100078" then
			REG_CitirocCfg3_REG_CFG33_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG33_WR <= "1"; 
		end if;
		if addr = x"00100079" then
			REG_CitirocCfg3_REG_CFG34_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG34_WR <= "1"; 
		end if;
		if addr = x"0010007A" then
			REG_CitirocCfg3_REG_CFG35_WR <= wreg; 
			INT_CitirocCfg3_REG_CFG35_WR <= "1"; 
		end if;
		if addr = x"0010007B" then
			REG_CitirocCfg3_START_REG_CFG_WR <= wreg; 
			INT_CitirocCfg3_START_REG_CFG_WR <= "1"; 
		end if;
		If addr >= x"0010007D" And addr < x"0010007E" Then
			BUS_CitirocCfg0_WRITE_DATA <= wreg; 
			BUS_CitirocCfg0_W_INT <= "1"; 
		End If;
		if addr = x"0010007E" then
			REG_CitirocCfg0_REG_CFG0_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG0_WR <= "1"; 
		end if;
		if addr = x"0010007F" then
			REG_CitirocCfg0_REG_CFG1_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG1_WR <= "1"; 
		end if;
		if addr = x"00100080" then
			REG_CitirocCfg0_REG_CFG2_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG2_WR <= "1"; 
		end if;
		if addr = x"00100081" then
			REG_CitirocCfg0_REG_CFG3_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG3_WR <= "1"; 
		end if;
		if addr = x"00100082" then
			REG_CitirocCfg0_REG_CFG4_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG4_WR <= "1"; 
		end if;
		if addr = x"00100083" then
			REG_CitirocCfg0_REG_CFG5_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG5_WR <= "1"; 
		end if;
		if addr = x"00100084" then
			REG_CitirocCfg0_REG_CFG6_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG6_WR <= "1"; 
		end if;
		if addr = x"00100085" then
			REG_CitirocCfg0_REG_CFG7_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG7_WR <= "1"; 
		end if;
		if addr = x"00100086" then
			REG_CitirocCfg0_REG_CFG8_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG8_WR <= "1"; 
		end if;
		if addr = x"00100087" then
			REG_CitirocCfg0_REG_CFG9_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG9_WR <= "1"; 
		end if;
		if addr = x"00100088" then
			REG_CitirocCfg0_REG_CFG10_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG10_WR <= "1"; 
		end if;
		if addr = x"00100089" then
			REG_CitirocCfg0_REG_CFG11_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG11_WR <= "1"; 
		end if;
		if addr = x"0010008A" then
			REG_CitirocCfg0_REG_CFG12_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG12_WR <= "1"; 
		end if;
		if addr = x"0010008B" then
			REG_CitirocCfg0_REG_CFG13_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG13_WR <= "1"; 
		end if;
		if addr = x"0010008C" then
			REG_CitirocCfg0_REG_CFG14_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG14_WR <= "1"; 
		end if;
		if addr = x"0010008D" then
			REG_CitirocCfg0_REG_CFG15_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG15_WR <= "1"; 
		end if;
		if addr = x"0010008E" then
			REG_CitirocCfg0_REG_CFG16_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG16_WR <= "1"; 
		end if;
		if addr = x"0010008F" then
			REG_CitirocCfg0_REG_CFG17_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG17_WR <= "1"; 
		end if;
		if addr = x"00100090" then
			REG_CitirocCfg0_REG_CFG18_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG18_WR <= "1"; 
		end if;
		if addr = x"00100091" then
			REG_CitirocCfg0_REG_CFG19_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG19_WR <= "1"; 
		end if;
		if addr = x"00100092" then
			REG_CitirocCfg0_REG_CFG20_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG20_WR <= "1"; 
		end if;
		if addr = x"00100093" then
			REG_CitirocCfg0_REG_CFG21_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG21_WR <= "1"; 
		end if;
		if addr = x"00100094" then
			REG_CitirocCfg0_REG_CFG22_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG22_WR <= "1"; 
		end if;
		if addr = x"00100095" then
			REG_CitirocCfg0_REG_CFG23_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG23_WR <= "1"; 
		end if;
		if addr = x"00100096" then
			REG_CitirocCfg0_REG_CFG24_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG24_WR <= "1"; 
		end if;
		if addr = x"00100097" then
			REG_CitirocCfg0_REG_CFG25_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG25_WR <= "1"; 
		end if;
		if addr = x"00100098" then
			REG_CitirocCfg0_REG_CFG26_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG26_WR <= "1"; 
		end if;
		if addr = x"00100099" then
			REG_CitirocCfg0_REG_CFG27_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG27_WR <= "1"; 
		end if;
		if addr = x"0010009A" then
			REG_CitirocCfg0_REG_CFG28_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG28_WR <= "1"; 
		end if;
		if addr = x"0010009B" then
			REG_CitirocCfg0_REG_CFG29_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG29_WR <= "1"; 
		end if;
		if addr = x"0010009C" then
			REG_CitirocCfg0_REG_CFG30_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG30_WR <= "1"; 
		end if;
		if addr = x"0010009D" then
			REG_CitirocCfg0_REG_CFG31_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG31_WR <= "1"; 
		end if;
		if addr = x"0010009E" then
			REG_CitirocCfg0_REG_CFG32_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG32_WR <= "1"; 
		end if;
		if addr = x"0010009F" then
			REG_CitirocCfg0_REG_CFG33_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG33_WR <= "1"; 
		end if;
		if addr = x"001000A0" then
			REG_CitirocCfg0_REG_CFG34_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG34_WR <= "1"; 
		end if;
		if addr = x"001000A1" then
			REG_CitirocCfg0_REG_CFG35_WR <= wreg; 
			INT_CitirocCfg0_REG_CFG35_WR <= "1"; 
		end if;
		if addr = x"001000A2" then
			REG_CitirocCfg0_START_REG_CFG_WR <= wreg; 
			INT_CitirocCfg0_START_REG_CFG_WR <= "1"; 
		end if;
		if addr = x"00000000" then
			REG_T0_SOFT_FREQ_WR <= wreg; 
			INT_T0_SOFT_FREQ_WR <= "1"; 
		end if;
		if addr = x"00000001" then
			REG_T0_SEL_WR <= wreg; 
			INT_T0_SEL_WR <= "1"; 
		end if;
		if addr = x"0000000F" then
			REG_HOLD_TIME_WR <= wreg; 
			INT_HOLD_TIME_WR <= "1"; 
		end if;
		if addr = x"00000010" then
			REG_FR_IFP_WR <= wreg; 
			INT_FR_IFP_WR <= "1"; 
		end if;
		if addr = x"00000011" then
			REG_FR_LIMIT_WR <= wreg; 
			INT_FR_LIMIT_WR <= "1"; 
		end if;
		if addr = x"00000012" then
			REG_FR_IFP2_WR <= wreg; 
			INT_FR_IFP2_WR <= "1"; 
		end if;
		if addr = x"00000013" then
			REG_FR_MODE_WR <= wreg; 
			INT_FR_MODE_WR <= "1"; 
		end if;
		if addr = x"00000014" then
			REG_FR_DBG1_WR <= wreg; 
			INT_FR_DBG1_WR <= "1"; 
		end if;
		if addr = x"00000015" then
			REG_FR_DBG2_WR <= wreg; 
			INT_FR_DBG2_WR <= "1"; 
		end if;
		If addr >= x"00200000" And addr < x"00200001" Then
			BUS_CP_0_WRITE_DATA <= wreg; 
			BUS_CP_0_W_INT <= "1"; 
		End If;
		if addr = x"00200003" then
			REG_CP_0_CONFIG_WR <= wreg; 
			INT_CP_0_CONFIG_WR <= "1"; 
		end if;
		If addr >= x"0002001A" And addr < x"0002001B" Then
			BUS_CitirocFrame0_WRITE_DATA <= wreg; 
			BUS_CitirocFrame0_W_INT <= "1"; 
		End If;
		if addr = x"0002001B" then
			REG_CitirocFrame0_CONTROL_WR <= wreg; 
			INT_CitirocFrame0_CONTROL_WR <= "1"; 
		end if;
		If addr >= x"00300000" And addr < x"00300001" Then
			BUS_DTWC_WRITE_DATA <= wreg; 
			BUS_DTWC_W_INT <= "1"; 
		End If;
		if addr = x"00000016" then
			REG_VALIDATION_CFG_WR <= wreg; 
			INT_VALIDATION_CFG_WR <= "1"; 
		end if;
		if addr = x"FFFF0000" then
			REG_HV_ON_WR <= wreg; 
			INT_HV_ON_WR <= "1"; 
		end if;
		if addr = x"FFFF0001" then
			REG_HV_EMERGENCY_WR <= wreg; 
			INT_HV_EMERGENCY_WR <= "1"; 
		end if;
		if addr = x"FFFF0002" then
			REG_HV_VOUT_WR <= wreg; 
			INT_HV_VOUT_WR <= "1"; 
		end if;
		if addr = x"FFFF0003" then
			REG_HV_ENTCOMP_WR <= wreg; 
			INT_HV_ENTCOMP_WR <= "1"; 
		end if;
		if addr = x"FFFF0004" then
			REG_HV_TM_WR <= wreg; 
			INT_HV_TM_WR <= "1"; 
		end if;
		if addr = x"FFFF0005" then
			REG_HV_TQ_WR <= wreg; 
			INT_HV_TQ_WR <= "1"; 
		end if;
		if addr = x"FFFF0006" then
			REG_HV_TCOEF_WR <= wreg; 
			INT_HV_TCOEF_WR <= "1"; 
		end if;
		if addr = x"FFFF0007" then
			REG_HV_IMAX_WR <= wreg; 
			INT_HV_IMAX_WR <= "1"; 
		end if;
		if addr = x"FFFF0008" then
			REG_HV_RAMP_WR <= wreg; 
			INT_HV_RAMP_WR <= "1"; 
		end if;
		if addr = x"FFFF0009" then
			REG_HV_VMAX_WR <= wreg; 
			INT_HV_VMAX_WR <= "1"; 
		end if;
		if addr = x"FFFF0010" then
			REG_HV_MSTATUS_WR <= wreg; 
			INT_HV_MSTATUS_WR <= "1"; 
		end if;
		if addr = x"FFFF0011" then
			REG_HV_MVOUT_WR <= wreg; 
			INT_HV_MVOUT_WR <= "1"; 
		end if;
		if addr = x"FFFF0013" then
			REG_HV_MTEMP_WR <= wreg; 
			INT_HV_MTEMP_WR <= "1"; 
		end if;
		if addr = x"FFFF0014" then
			REG_HV_MVTARGET_WR <= wreg; 
			INT_HV_MVTARGET_WR <= "1"; 
		end if;
		if addr = x"FFFF0015" then
			REG_HV_MAVTARGET_WR <= wreg; 
			INT_HV_MAVTARGET_WR <= "1"; 
		end if;
		if addr = x"FFFF0020" then
			REG_T_SENS1_WR <= wreg; 
			INT_T_SENS1_WR <= "1"; 
		end if;
		if addr = x"FFFF0021" then
			REG_T_SENS2_WR <= wreg; 
			INT_T_SENS2_WR <= "1"; 
		end if;
		if addr = x"FFFF0012" then
			REG_HV_MIOUT_WR <= wreg; 
			INT_HV_MIOUT_WR <= "1"; 
		end if;
		if addr = x"0000001B" then
			REG_TRIGGER_OUT_W_WR <= wreg; 
			INT_TRIGGER_OUT_W_WR <= "1"; 
		end if;
		If addr >= x"00030000" And addr < x"00040000" Then
			BUS_RateMeter_2_WRITE_DATA <= wreg; 
			BUS_RateMeter_2_W_INT <= "1"; 
		End If;
		If addr >= x"00050000" And addr < x"00060000" Then
			BUS_RateMeter_3_WRITE_DATA <= wreg; 
			BUS_RateMeter_3_W_INT <= "1"; 
		End If;
		If addr >= x"00070000" And addr < x"00080000" Then
			BUS_RateMeter_0_WRITE_DATA <= wreg; 
			BUS_RateMeter_0_W_INT <= "1"; 
		End If;
		If addr >= x"000D0000" And addr < x"000E0000" Then
			BUS_RateMeter_1_WRITE_DATA <= wreg; 
			BUS_RateMeter_1_W_INT <= "1"; 
		End If;
		if addr = x"0000001C" then
			REG_T0SW_WR <= wreg; 
			INT_T0SW_WR <= "1"; 
		end if;
		if addr = x"0000001D" then
			REG_GTS_RESSEL_WR <= wreg; 
			INT_GTS_RESSEL_WR <= "1"; 
		end if;
		if addr = x"00000017" then
			REG_TRIG_MASK_A_WR <= wreg; 
			INT_TRIG_MASK_A_WR <= "1"; 
		end if;
		if addr = x"00000018" then
			REG_TRIG_MASK_B_WR <= wreg; 
			INT_TRIG_MASK_B_WR <= "1"; 
		end if;
		if addr = x"00000019" then
			REG_TRIG_MASK_C_WR <= wreg; 
			INT_TRIG_MASK_C_WR <= "1"; 
		end if;
		if addr = x"00000020" then
			REG_TRIG_MASK_D_WR <= wreg; 
			INT_TRIG_MASK_D_WR <= "1"; 
		end if;
		If addr >= x"00090000" And addr < x"00090800" Then
			BUS_Oscilloscope_0_WRITE_DATA <= wreg; 
			BUS_Oscilloscope_0_W_INT <= "1"; 
		End If;
		if addr = x"00090802" then
			REG_Oscilloscope_0_CONFIG_TRIGGER_MODE_WR <= wreg; 
			INT_Oscilloscope_0_CONFIG_TRIGGER_MODE_WR <= "1"; 
		end if;
		if addr = x"00090803" then
			REG_Oscilloscope_0_CONFIG_PRETRIGGER_WR <= wreg; 
			INT_Oscilloscope_0_CONFIG_PRETRIGGER_WR <= "1"; 
		end if;
		if addr = x"00090804" then
			REG_Oscilloscope_0_CONFIG_TRIGGER_LEVEL_WR <= wreg; 
			INT_Oscilloscope_0_CONFIG_TRIGGER_LEVEL_WR <= "1"; 
		end if;
		if addr = x"00090805" then
			REG_Oscilloscope_0_CONFIG_ARM_WR <= wreg; 
			INT_Oscilloscope_0_CONFIG_ARM_WR <= "1"; 
		end if;
		if addr = x"00090806" then
			REG_Oscilloscope_0_CONFIG_DECIMATOR_WR <= wreg; 
			INT_Oscilloscope_0_CONFIG_DECIMATOR_WR <= "1"; 
		end if;
		If addr >= x"000B0000" And addr < x"000B0800" Then
			BUS_Oscilloscope_1_WRITE_DATA <= wreg; 
			BUS_Oscilloscope_1_W_INT <= "1"; 
		End If;
		if addr = x"000B0802" then
			REG_Oscilloscope_1_CONFIG_TRIGGER_MODE_WR <= wreg; 
			INT_Oscilloscope_1_CONFIG_TRIGGER_MODE_WR <= "1"; 
		end if;
		if addr = x"000B0803" then
			REG_Oscilloscope_1_CONFIG_PRETRIGGER_WR <= wreg; 
			INT_Oscilloscope_1_CONFIG_PRETRIGGER_WR <= "1"; 
		end if;
		if addr = x"000B0804" then
			REG_Oscilloscope_1_CONFIG_TRIGGER_LEVEL_WR <= wreg; 
			INT_Oscilloscope_1_CONFIG_TRIGGER_LEVEL_WR <= "1"; 
		end if;
		if addr = x"000B0805" then
			REG_Oscilloscope_1_CONFIG_ARM_WR <= wreg; 
			INT_Oscilloscope_1_CONFIG_ARM_WR <= "1"; 
		end if;
		if addr = x"000B0806" then
			REG_Oscilloscope_1_CONFIG_DECIMATOR_WR <= wreg; 
			INT_Oscilloscope_1_CONFIG_DECIMATOR_WR <= "1"; 
		end if;
		If addr >= x"000F0000" And addr < x"000F0800" Then
			BUS_Oscilloscope_2_WRITE_DATA <= wreg; 
			BUS_Oscilloscope_2_W_INT <= "1"; 
		End If;
		if addr = x"000F0802" then
			REG_Oscilloscope_2_CONFIG_TRIGGER_MODE_WR <= wreg; 
			INT_Oscilloscope_2_CONFIG_TRIGGER_MODE_WR <= "1"; 
		end if;
		if addr = x"000F0803" then
			REG_Oscilloscope_2_CONFIG_PRETRIGGER_WR <= wreg; 
			INT_Oscilloscope_2_CONFIG_PRETRIGGER_WR <= "1"; 
		end if;
		if addr = x"000F0804" then
			REG_Oscilloscope_2_CONFIG_TRIGGER_LEVEL_WR <= wreg; 
			INT_Oscilloscope_2_CONFIG_TRIGGER_LEVEL_WR <= "1"; 
		end if;
		if addr = x"000F0805" then
			REG_Oscilloscope_2_CONFIG_ARM_WR <= wreg; 
			INT_Oscilloscope_2_CONFIG_ARM_WR <= "1"; 
		end if;
		if addr = x"000F0806" then
			REG_Oscilloscope_2_CONFIG_DECIMATOR_WR <= wreg; 
			INT_Oscilloscope_2_CONFIG_DECIMATOR_WR <= "1"; 
		end if;
		If addr >= x"00010000" And addr < x"00010800" Then
			BUS_Oscilloscope_3_WRITE_DATA <= wreg; 
			BUS_Oscilloscope_3_W_INT <= "1"; 
		End If;
		if addr = x"00010802" then
			REG_Oscilloscope_3_CONFIG_TRIGGER_MODE_WR <= wreg; 
			INT_Oscilloscope_3_CONFIG_TRIGGER_MODE_WR <= "1"; 
		end if;
		if addr = x"00010803" then
			REG_Oscilloscope_3_CONFIG_PRETRIGGER_WR <= wreg; 
			INT_Oscilloscope_3_CONFIG_PRETRIGGER_WR <= "1"; 
		end if;
		if addr = x"00010804" then
			REG_Oscilloscope_3_CONFIG_TRIGGER_LEVEL_WR <= wreg; 
			INT_Oscilloscope_3_CONFIG_TRIGGER_LEVEL_WR <= "1"; 
		end if;
		if addr = x"00010805" then
			REG_Oscilloscope_3_CONFIG_ARM_WR <= wreg; 
			INT_Oscilloscope_3_CONFIG_ARM_WR <= "1"; 
		end if;
		if addr = x"00010806" then
			REG_Oscilloscope_3_CONFIG_DECIMATOR_WR <= wreg; 
			INT_Oscilloscope_3_CONFIG_DECIMATOR_WR <= "1"; 
		end if;
		if addr = x"0000001E" then
			REG_T0_RESET_ON_START_WR <= wreg; 
			INT_T0_RESET_ON_START_WR <= "1"; 
		end if;
		if addr = x"0000001F" then
			REG_ISRUNNING_WR <= wreg; 
			INT_ISRUNNING_WR <= "1"; 
		end if;
		if addr = x"00000021" then
			REG_VETO_WAIT_RUN_WR <= wreg; 
			INT_VETO_WAIT_RUN_WR <= "1"; 
		end if;
		if addr = x"00000022" then
			REG_GBL_EN_VETO_EXT_WR <= wreg; 
			INT_GBL_EN_VETO_EXT_WR <= "1"; 
		end if;
		if addr = x"00000023" then
			REG_INVETO_WR <= wreg; 
			INT_INVETO_WR <= "1"; 
		end if;
		if addr = x"00000024" then
			REG_TRG_OUT_MONOSTABLE_EN_WR <= wreg; 
			INT_TRG_OUT_MONOSTABLE_EN_WR <= "1"; 
		end if;


				IF addr = x"FFFF0034" THEN
					REG_EEPROM_WR <= wreg;
					INT_EEPROM_WR <= "1";
				END IF;
            end if;
    
    
            if f_BUS_INT_RD = '1' then
                f_BUS_DATASTROBE_REG <= '1';
                rreg := x"DEADBEEF";

		if addr = x"00000003" then
			rreg := REG_TRIG_A_SEL_RD; 
		End If;
		if addr = x"00000004" then
			rreg := REG_VET_A_EN_RD; 
		End If;
		if addr = x"00000005" then
			rreg := REG_VET_B_EN_RD; 
		End If;
		if addr = x"00000006" then
			rreg := REG_VET_C_EN_RD; 
		End If;
		if addr = x"00000007" then
			rreg := REG_VET_D_EN_RD; 
		End If;
		if addr = x"00000008" then
			rreg := REG_SW_VET_A_RD; 
		End If;
		if addr = x"00000009" then
			rreg := REG_SW_VET_B_RD; 
		End If;
		if addr = x"0000000A" then
			rreg := REG_SW_VET_C_RD; 
		End If;
		if addr = x"0000000B" then
			rreg := REG_SW_VET_D_RD; 
		End If;
		if addr = x"0000000C" then
			rreg := REG_TRIG_GBL_SEL_RD; 
		End If;
		if addr = x"0000000D" then
			rreg := REG_EXT_DELAY_RD; 
		End If;
		if addr = x"0000000E" then
			rreg := REG_SW_TRIG_FREQ_RD; 
		End If;
		if addr = x"00020007" then
			rreg := REG_A_RATE_RD; 
		End If;
		if addr = x"00020008" then
			rreg := REG_B_RATE_RD; 
		End If;
		if addr = x"00020009" then
			rreg := REG_C_RATE_RD; 
		End If;
		if addr = x"0002000A" then
			rreg := REG_D_RATE_RD; 
		End If;
		if addr = x"0002000B" then
			rreg := REG_T0_COUNT_RD; 
		End If;
		if addr = x"0002000C" then
			rreg := REG_A_TRG_RD; 
		End If;
		if addr = x"0002000D" then
			rreg := REG_B_TRG_RD; 
		End If;
		if addr = x"0002000E" then
			rreg := REG_C_TRG_RD; 
		End If;
		if addr = x"0002000F" then
			rreg := REG_D_TRG_RD; 
		End If;
		if addr = x"00020010" then
			rreg := REG_RUNSTART_RD; 
		End If;
		if addr = x"00020011" then
			rreg := REG_RUN_TIME_LSB_RD; 
		End If;
		if addr = x"00020012" then
			rreg := REG_RUN_TIME_MSB_RD; 
		End If;
		if addr = x"00020013" then
			rreg := REG_DEAD_TIME_LSB_RD; 
		End If;
		if addr = x"00020014" then
			rreg := REG_DEAD_TIME_MSB_RD; 
		End If;
		if addr = x"00020015" then
			rreg := REG_A_LOST_RD; 
		End If;
		if addr = x"00020016" then
			rreg := REG_B_LOST_RD; 
		End If;
		if addr = x"00020017" then
			rreg := REG_C_LOST_RD; 
		End If;
		if addr = x"00020018" then
			rreg := REG_D_LOST_RD; 
		End If;
		if addr = x"00000000" then
			rreg := REG_T0_SOFT_FREQ_RD; 
		End If;
		if addr = x"00000001" then
			rreg := REG_T0_SEL_RD; 
		End If;
		if addr = x"0000000F" then
			rreg := REG_HOLD_TIME_RD; 
		End If;
		if addr = x"00000010" then
			rreg := REG_FR_IFP_RD; 
		End If;
		if addr = x"00000011" then
			rreg := REG_FR_LIMIT_RD; 
		End If;
		if addr = x"00000012" then
			rreg := REG_FR_IFP2_RD; 
		End If;
		if addr = x"00000013" then
			rreg := REG_FR_MODE_RD; 
		End If;
		if addr = x"00000014" then
			rreg := REG_FR_DBG1_RD; 
		End If;
		if addr = x"00000015" then
			rreg := REG_FR_DBG2_RD; 
		End If;
		if addr = x"00200001" then
			rreg := REG_CP_0_READ_STATUS_RD; 
		End If;
		if addr = x"00200002" then
			rreg := REG_CP_0_READ_VALID_WORDS_RD; 
		End If;
		if addr = x"0002001C" then
			rreg := REG_CitirocFrame0_STATUS_RD; 
		End If;
		if addr = x"00000016" then
			rreg := REG_VALIDATION_CFG_RD; 
		End If;
		if addr = x"FFFF0000" then
			rreg := REG_HV_ON_RD; 
		End If;
		if addr = x"FFFF0001" then
			rreg := REG_HV_EMERGENCY_RD; 
		End If;
		if addr = x"FFFF0002" then
			rreg := REG_HV_VOUT_RD; 
		End If;
		if addr = x"FFFF0003" then
			rreg := REG_HV_ENTCOMP_RD; 
		End If;
		if addr = x"FFFF0004" then
			rreg := REG_HV_TM_RD; 
		End If;
		if addr = x"FFFF0005" then
			rreg := REG_HV_TQ_RD; 
		End If;
		if addr = x"FFFF0006" then
			rreg := REG_HV_TCOEF_RD; 
		End If;
		if addr = x"FFFF0007" then
			rreg := REG_HV_IMAX_RD; 
		End If;
		if addr = x"FFFF0008" then
			rreg := REG_HV_RAMP_RD; 
		End If;
		if addr = x"FFFF0009" then
			rreg := REG_HV_VMAX_RD; 
		End If;
		if addr = x"FFFF0010" then
			rreg := REG_HV_MSTATUS_RD; 
		End If;
		if addr = x"FFFF0011" then
			rreg := REG_HV_MVOUT_RD; 
		End If;
		if addr = x"FFFF0013" then
			rreg := REG_HV_MTEMP_RD; 
		End If;
		if addr = x"FFFF0014" then
			rreg := REG_HV_MVTARGET_RD; 
		End If;
		if addr = x"FFFF0015" then
			rreg := REG_HV_MAVTARGET_RD; 
		End If;
		if addr = x"FFFF0020" then
			rreg := REG_T_SENS1_RD; 
		End If;
		if addr = x"FFFF0021" then
			rreg := REG_T_SENS2_RD; 
		End If;
		if addr = x"FFFF0012" then
			rreg := REG_HV_MIOUT_RD; 
		End If;
		if addr = x"0000001B" then
			rreg := REG_TRIGGER_OUT_W_RD; 
		End If;
		if addr = x"0000001C" then
			rreg := REG_T0SW_RD; 
		End If;
		if addr = x"0000001D" then
			rreg := REG_GTS_RESSEL_RD; 
		End If;
		if addr = x"00000017" then
			rreg := REG_TRIG_MASK_A_RD; 
		End If;
		if addr = x"00000018" then
			rreg := REG_TRIG_MASK_B_RD; 
		End If;
		if addr = x"00000019" then
			rreg := REG_TRIG_MASK_C_RD; 
		End If;
		if addr = x"00000020" then
			rreg := REG_TRIG_MASK_D_RD; 
		End If;
		if addr = x"00090800" then
			rreg := REG_Oscilloscope_0_READ_STATUS_RD; 
		End If;
		if addr = x"00090801" then
			rreg := REG_Oscilloscope_0_READ_POSITION_RD; 
		End If;
		if addr = x"000B0800" then
			rreg := REG_Oscilloscope_1_READ_STATUS_RD; 
		End If;
		if addr = x"000B0801" then
			rreg := REG_Oscilloscope_1_READ_POSITION_RD; 
		End If;
		if addr = x"000F0800" then
			rreg := REG_Oscilloscope_2_READ_STATUS_RD; 
		End If;
		if addr = x"000F0801" then
			rreg := REG_Oscilloscope_2_READ_POSITION_RD; 
		End If;
		if addr = x"00010800" then
			rreg := REG_Oscilloscope_3_READ_STATUS_RD; 
		End If;
		if addr = x"00010801" then
			rreg := REG_Oscilloscope_3_READ_POSITION_RD; 
		End If;
		if addr = x"0000001E" then
			rreg := REG_T0_RESET_ON_START_RD; 
		End If;
		if addr = x"0000001F" then
			rreg := REG_ISRUNNING_RD; 
		End If;
		if addr = x"00000021" then
			rreg := REG_VETO_WAIT_RUN_RD; 
		End If;
		if addr = x"00000022" then
			rreg := REG_GBL_EN_VETO_EXT_RD; 
		End If;
		if addr = x"00000023" then
			rreg := REG_INVETO_RD; 
		End If;
		if addr = x"00000024" then
			rreg := REG_TRG_OUT_MONOSTABLE_EN_RD; 
		End If;
	
               
                if addr = x"FFFFF908" then
                    rreg := REG_Fiforeset_RD;
                    INT_Fiforeset_RD <= "1"; 
                End If;

				IF addr = x"FFFF0030" THEN
					rreg := PGB_EEPROM_KEY;
				END IF;				

				IF addr = x"FFFF0031" THEN
					rreg := PGB_REG_MODEL;
				END IF;				

				IF addr = x"FFFF0032" THEN
					rreg := PGB_BOARD_SN;
				END IF;				

				IF addr = x"FFFF0033" THEN
					rreg := PGB_ASIC_COUNT;
				END IF;	
				
				IF addr = x"FFFF0100" THEN
					rreg := REG_IIC_STATUS;
				END IF;	
				
                if addr = x"FFFFFFFF" then
                    rreg := x"00555000"; 
                End If;    
                if addr = x"FFFFFFFE" then
                    rreg := x"22031600"; 
                End If; 
                
                if addr = x"FFFEF000" then
                    rreg := REG_FLASH_CNTR_RD;
                    INT_FLASH_CNTR_RD <= "1"; 
                End If;    
                if addr = x"FFFEF001" then
                    rreg := REG_FLASH_ADDRESS_RD;
                    INT_FLASH_CNTR_RD <= "1"; 
                End If;                   
                if addr = x"FFFEFFFF" then
                    rreg := x"1234ABBA";
                    INT_FLASH_CNTR_RD <= "1"; 
                End If;                
            
                if addr = x"FFFFFFFA" then
                    rreg := REG_FIRMWARE_BUILD;
                End If;                  
           
                if addr = x"FFFEFFFC" then
                    rreg := x"22031600";
                End If;

                if addr = x"FFFFFFFB" then
                    rreg := x"AAAA5550";
                End If;				
                
				if addr = x"FFFFFFFC" then
                    rreg := REG_UNIQUE_RD;
                End If;				
				
                f_BUS_DATA_RD_REG <= rreg;
            end if;

		end if;
	end process;
	

end Behavioral;

